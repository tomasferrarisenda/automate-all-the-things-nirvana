backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgDPOFEyLrLg/2QdN7ziFqN/YdHMDHu54yekb6j7KQbmJzavCBokGlr//Se/GECkeNUGmQ9VftLjC1Z40tcstmB5riJQXycQuSUNDQRt9VyKoKCvyVzXGUEmoo7UcjgRX5K2ScJRN0Y0VyYoOAH0vGKjmtTAcJLm0tzBIFCK/ef7FcDcPJDrC/D+Flzdri4OefWETJnfUtJ0lga5q9tHke6kqwNGl2YlwNw11dm/WR7hEdjmfR3Oa8jxyj0q3xvCa0uoLpajk3vU0SeqwJSZ49iKYaF5J8/e8kfENxk/NZISA/8MId2t9arIIfgdBcq+8+2rk/8k3S1NM+FxGXaGnmREZJ2x2laWriBLuHPYDacT1ab3pn2jxEGltNWVpbfXjxhmSJk9edBvk+IXRSppH56gekiftCt5giNizfAfuSpEyz2rE0P06/LsTVNdpDx/kJ9q2xU5PIrB+DO6jrp8rjcyn2zUc4NtAn8UGnfc7sfKEMXbe3p9HqGtEgroRV9MRFhCoej6cRSlLAzqdKLT4EW2e3CHITjrARWm5GRyzZ78zY5FMLlxXH90pc+6YSYiIezVTq5f1TvoOJfHE7LiNilEtLEQNpbBx4Kb0tg2qwE++tB2NJmPVH2/TQLyIhGvg+EqzJHkPAY9/yUJBYyYxm/c8MdsJbMrhvw0mARl2DEgArLX4TmgQnD+/UC8UOPS6dSMhbS/2/jg6unKt6IfVUWLO0vtX0O7oJXL73atet48RRW3Ssrbef6x # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBbPbMdZxbV7cY11mBYpmkr+b33c/cGTIOHWWjd13ONXCaYr1WH8XvdchY2Y0XdtPO0P9hZFLhWmnycE9rWGFeHf+PQ0Gz533wtPsPWxFE4r+XzgQvN3A86YXLyvj/Ynz4k+zBbl8yS7JcC/qUiNNmkq5VMJlDrzUKsiDzlu+IkRh+gGKcwSojfq0OQcJEbMxcybLisnKcO0N0S+mkMKi9fBgVAdJ4QEJq7SYz/6w6DDHGetLAcW3rvtRRFKSCCZSdcA28WY3qreL8k0bssF3acgd3si9y7kgN9EoW/VBWaCHKjVKBGFv8pOCZYnhGVc0frJbLDrk/ML0HxEAwtxmt05JDrupmwty4HuW31lu/k91jarNFun3YSbx6Ldq11G9Nppre7nqriYKxZwipuEvCPxGUlbZQCISPyQ2TcJx3YDnnyA8+0aTyoaxwM/9ZzcuoSyMYYzI7NAOe2g4BZ066/H3vhnLSHSejn9kofn8pB9oy7orON2OgwGCxjoHyizwTCb4Nv3JkCe/u3mgDQipDy2g1YBCree1MV3bOEGn15cXR0C4iAUqu/7dftlh/WRkxpDXNxg8i4XhmIHpttMqDT95MqOUskhTj+u0u6uL5qSJ5Skd3LnQvmyJeBzFeBNwijJmqVG10sp/+EEy8gUFMpv4anlHHdl+MbEpAmTXuqv0Rqo6G+0y3kMWxE79j7s6IEBxXPQr9tczuvO6gL0gn79Rgo+g== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAlIFy1ZbDR8mm1OP+WoYwcAm3wrmZen45YogC0rhYGL8a55lcUWVZslkUC2j82WEcMG9wuG0HKmUag+OMyiEphMFmXVa21c7JzBn2jqsJMXzU1fbP0sHijhD3GqE+bp17I26lz4XcfWnmRp8arLsoyiaTTr4O/8N+2+BZns4sRGce6Ppm2yD6zf32KyMchFmcUFsiEkPz3YPa+QU+eVa/ZiZh+Eh/HVBTfgG00H0bqWfxUOKO56ShKY5Tc2V64T54FT+8ToWupeDv1kKujFTZ+l00YOGXLstv9bEl+1guHT+KOlQ8QrCb+M96hyQ4KQjuHAklA6BKbiBx17VlK3WbqkC+mHcis5lu9GOlwtvdcmFY/4ksQrg/lCf3uF1JscJL4AjD6PRzJKyIM7V22GxhE4WFJRWsqDbBfCZHA6kq+aKuwyHxCZb+WMW2jlEt4j1Mafz03am2MAGZbzr/pWqOZr6PxPb+fMXTfhrujX0GgxM+R8eGAkIkDW57Y4vAynVPGA3fNnXwSbdgLqB8/LcUzTMHxMPyjEBnm9/Q24+k7LfaHjrvT0O84NrW1+Ch0H3hGjU8uraam3MyV06RBkrJ4tqZQcpft4pn+Gnm2Cxp265ahRvfPG6/zMUJ0H2Z2uKiv37olsO7yUYYJY95bl4f3rd+wPdbQFJjXxYUqsmaya9FeEpcE23yuHIrU9olV/elwYw/MizdFIXvxH4z7xWv5W7OhN3qWpa+uEAxtYCo9EWCfWtiTMaab # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAPfw7mGBKOQi3U01ohlafs+AKDHa22zVYbeBECrgyxpm1DiTawwpLFZ+prYVvErJcv9cgoAi+StJp9wWgFiAY5EZH0e7Ib2fRXu0z32OI5R7U1vW1+Rmc22PBKhHeo72y1X+5Xjv+lWRBlHEOrCYjd7UGAd+rRedzeGCX8FGpMGjp9hqhDl79IakMPR93XjfTO3kAyQ8Quf40As0/eGsgaN5mMmsWZIpYxZuynZfF74z0KcuBHtWTJi9RhokxoUViNamo3/GH+x3+GhxCOXmdf/HDnuPoQyBvOB5poymvD/xQ9o0GlCBCprc/zoH6xijImrgSbyz43z1Ed/Ex9zSVBmxXDocPi53WpQCgWd9DnvFwrwZU658f8qVwSkjFkPU0Nm+AcYN0Yy24YzTXoOn2FGioSIM7Nd15MC+h6pURB4eOGSH+gHzcucWKavvKNZ+KiZ6dBXPuRRQprWzcdnfOs0RLru5wGPPLodhc2gPqweWCt0jqORBK2pbL5FCp4A8WJ3ztPVI4E0ttKondOCcUZCJ/Y6TvKDkDC5m/VCVphMvFrb9PYe1n1GWeMMKpEY2NyNYDWM3GohyMvzZ3IFSdM7Jg0uqHBiAj+tlUbvIPrCsx65Pv/SAZp3qi0F7xcC6uX9yTVr9kay81Y9aoieQEqaRW6cyNGm7oPPsfqX+bSuYIAkBQPaT47G2wrCBistCfj55Jx1Zqcfmi8fofFTAtYG4+uZ0xO5ZxRocC+T++AfeMcwRRrSLQ64udCGPNsiC+2TYEhLwRykg9C8Kkl/mgAB10A0H8PZnG5jXhLR2CnecG8va7rz38appTxrmIdSJ/Li323T2N+8Q082KjvlwCcaPixtqLk4JPGLfFFN6N3/YRFkIy5P7A1A1sbEPg11BBML3IQGgWPnEJsXJ6SfKidzcJhCJDU5Z+yxKjR1eudyHuXQCv9fwTS8V3T3ziPsGufIcJm7fODvdjx7zX5NweZV2bYs2+HybJnOi4Zxub569wrmwdZWptG3ODIQDZddxbQ3/D2hE8QxSB6VUc= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgCAa0Vbn+uzEn+IgybVcUOlVL9DRZO8LywUXYCFujBDNahibYNg1i2sooN+uSskpClWk1AaEJn1AN4t/+xBM5DHPvVlwDgjsNutozQTwDF5cgmMmqYl02ckLiB0nfPGNcE/bSUBeUf5P5iY7LRf1Llc4oYYdC4X+3DMFrhHIVg1uU/cRt3fz/E5wIaIFDq7SjE1JB+p1EjIwdSZL38HlKEFcl4Ps0M7/VkEs3NEgL335qdzd/Bxl/reTzXhWYW9XicCZfVVkdf7ALzOdSpwZwwH5Al9VC5q794zaKfArq/ixckhqb7IOYI2U6LjPIUK+484A0CtaRRNhoAznmYh48TIEDFfqcpAWw1/zSMnBKGWZYXh031xbudEAmQmx/SsR95sq4O2U35n4dVL8S73I1Q1TyDHUzoOCeTJofDT0AdTmjdpy0ArIMhjXa6LonLqT9cY9RA3UitT4bGUQgrBXXbxHjsBP88Rsdaa70COi4x4NyEOcA2QTKvdklcUIseEsCjni7CMaT6RlbElyxPAD5agYfZlniL6dp0uatphrJawUTFguljJ1qSqBnAm2i/EnrYeCODMYN6OM2BdKYdWXrYXsSYOBAB3hCyYGxkJ+yTS0XDBDGz8qnrio2G5SswoZuWSH9okwJoemAfzOz6lsx8s0Le+pKydlFHBIyNbsRG1mqG+PjtmB0XDGHjqL0QxZZp6StBB+5W5Pby8v5LWffL/AvkWJEmjpNAxJ/45bXWYd9KD2jODFUJGrw9TopnG # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

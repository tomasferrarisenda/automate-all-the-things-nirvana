backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "6" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgC7WKHk/Z1eqX5ywY4fGyPsseLkl3M290fg/cHY0ypvNsYlkkANcnNqJgkKH7pcHSc8d86bq3Bu6CXPgPkBo3LWRrRwfPgJx6MZ4NOjZRCUIzGRb/0dBDZfdSgVE1zf2uYGmEsS4GGpb+i6bS+VbTsocNuMc6cQfdTTITp57nccLvtcuEDtQC8dgQM6gS9LegdMIM1OxA7m7xoRCG/1iEFhN8rWU2uMxWBai/VXjjpdSxSjBKXTtr9Ui71pBMeQkvh1dsntKN9t7x46Rt3kGHPesR8KzVUu1mfd+dEDync8FTegQpJkvfxep8NeCZON/q36bLak7s26285eHwdceGoRjzNFvRfn+5Uh83Nzj4aUJlKbqHjDcJqhsu4Fa3LBAgLUt7l6lGPNW8FHz6fga0L95X3d4t2ISPX+Hn438MHHyVj5DQrfYCYpD38mf+fUjTdSA4xOh9+wZGmWNNxbXKZbYYWw6ziZsE7kI3gF7IYZNcAreHSzNedrQ/su5HlWe3/fNJm5QYlV/QIAP2JkEWWW/OXhuan4KeaKU+gWY3/yt/YDS9OxWrp1cxI5gfalT+7Mv9Z6bxvcea0PFeH9sWmiKTEIsgews2iXUd7YF2eqgbSvJScvKvO/P1PvcmvWDp8Lp8sP8KaGpVGBQQgE/6dXO3h6kuH24v5YcepWLc3BGGq3YlM2sJzRcaLC0teEiBOlL6uAREt3Y8TA9W7iSRh2wH7UGrtKnJUwFu7i+c1uUplqeF4S2W/3 # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgDMr03Leurd4RnSqOGBaPvfi0SH2EZDMaIdYLDbgDeJtjC5YtvUfMxMuTTfhrXWymg/VNRmn6uZGTNkrhdTHLj+GExgg513E/3CkGywaXcdn0+zZxFy08gseb3ItNq5hqFHiJ35J8LUB7ABCJkgb8sYzCP6lMI7LS28zEazJZw6APqQ/E+I7vlDzg3tM3z8HdU3fzrak4hUpL+XdqKtq66OThpP5jnfvNrVabRHd5i5szltVPR3hhURK0a4aZ5tPgDuKII0m7EghdbpVK4rV83H/Ni3jF9b0dOlJ/AVjLyqhXMd8XRsE36f8WR1t4dVWm0dswiS6NF3FJUmAr+xIDKqy3aS+qinlpxMqwt5UiiOSjk6OFa6475MA+yrrNf5q1t6wB7vpbRBj03YJvOnzWqDsg+rkkJs4BraAOb7cHJTVTuu/HbfNG4iuq6FHJlx0t691ODinW3clRTZJxiDYL6iZsZdfFxiSqbhtFnAXmhHGLgGY1tIf7TK4ax8nlQDQAayi2M4bp4aksUrCbb2FZ4+RHAwfL2Q6J5pNKa4cjfK9IxjkieB0RADLIH5POWfE1s6c5y9YoWdwtfScll+NON1YXh/40SowCxm8aYrQ17Ppj/VA6gZep7UKFO84CDieTOgyHJ1H4KaF3w8JIyhBThwpysEJO6aGduoPM0/HddE6ZILttHn+LNLIVA6KHBW1uM7llkIHgXs+IBymY8NqrfhjQza2A== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgDA/L+rzgmZGPBPZ9Yeknsw5VBZIeny18AFMr12DulS1eMA/BXMqaxcWJuCqfnAnrYTlV8phim5hAZXnP+q1Qn15dtpgGuYy+c8LxfPIEDIrN/KdIUeTkWK3vYNpVFFwqiyW9l98sxZbbP8CStif2KxyE7y3IJ23lNG5yK5FcSBdOerSZnR/quiGiNqNpjdbK3okgYkBo8Wng+lYX3jSa0kv+GfeBiaxYFjwsGkV9AhBQgVGCfvVjvZCTDwN50fKAGVrN0KHz6CGrrSdpk6fcXy0oX6JocpPl3xCkoL08VQ7zwjTmNt/g09pCMoXxtbXeKHT0xcjUwnhVX6I7vmCeolLcyFgrgbx/D9VIIfGlxTCI8U418e8mWZHpn7n93RX/bhO02q9S96Fi8+f3ekM3jNyVvAP8MS1X+JCKJDxvbI24x6GEKHiEBOI9rnX18Uor2n5faPCFSnQQEc4V36tGojyBtA4husf8zo4VJvxGZJ5FSFkkgZ1OFb34Mux/5pEC+s9cYiBHv+GG6zEU+YlQyeZAfhuNVOSXRhJ1P+cOqiS0fZKfw0OXmwrDGQhAgbYRXXbUl5qm9CkEsyK0iE4tgVXXSh3oAMqNcIREs1iZpOXJWuqLEA48jqEQRjVP/WjbTtfH1EEfjqk3kBTXkmJ5WTGHELfACHkrR1XT5nKlyN+SME67xW0GFdcn6znEDyJxvtgnhZgauQPesk1Cj+eO61uFe7YsW0A1lXL4H5FEFIENjFKBU+Cet0 # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgDNiS4wZkUbnhMV8XfTLDG/w0V8zAuF/T0dXd1trl9UvnopW8X2wmOwVEVUGol4uZNcW4IIGMQTZFjFVXKvIX7Wpe4bsigid37+xPfG4vt/q9DlntqXciIQswBLjtdEkPqmYOXcFovu3CKGyz5blWWGbq374Rs0WXs6Pw9c2rj5Ih7uM9Zi5/yOAkQblr4Qqf2OQcMaba1N2sRxK+fsHoxuN3DBc2Y0VapjLEKGJM4wOUbdl3K7An6gbcgZDeZsQnAeCj7EgaykkZFXmrWNMZAZxmV3YxSrXNJK6mesCsTQ1XzldJiD1+rjDq5+mmXuIAuHPs4KXKZs6gUbc+XFFQ0VrbxCQZGjLpgE9+dW6KYWk+a6UHfIO/qjzHTFuGnZtMwp7jYp0DIWa6Yk6LdJTGIRAsh0IeBjdV6wxjilJFfT8vH7N4lNz2OoflwXMVq6nEoSiCF/nSosBDap7Ynejt0qZxIwSoyIMJKkwbtmD3N3BfjIofkUfaOyDjtJS2uJK219F74aS84tm7s/iZMUbOqmAi2/LLyHdewOgjdmfueSwyDtGfIK+jdRWWX/QsFx5jG9jkay69AwiQu9Fg+lxL6NoKlXqbkrLmfdifAiMbTaCU44M4A/K47eGFrSB0j7Fe30c2u0b+h6jH9xhem7q+vhPNne86ynUwCpPV2LoQ1oWbgjpwzs1hOBlP0emDQA8wRP7KK5utMx+pA/N4Iu9y3TvxoRScHvbklUzho8+rjJ6yCndMmEZjtOUlHHJK66cQuh0EdSGr6yDugj3BavcuhQ6+BP9jCjajrUJ6nVAUkeeb1y73+Z1GnaO0SJeHyqzyZGIoKSoD1j4GESYMFUQbTP/G+DwteiN3qlLfyacvNuOXmVn3l9rSn8CpPhwKGLu5rmhBaQSvZ4GoP5S0I+AP0WhdpQLxAKBOIEfovlIHZ8sH/uGkj1YaZoRK0P77NcHc0DnKMyrfVYR7pYNWM2ebhdzcUoVjFq4IMvcrazs/UwYDZaXJ1iVNYIikt+4SJXjCeAQPNssHpDzKpG7q0= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgAjtd6LZlCm1BLv0ZTiWVASrnVY3yTLKYKC5T61/QDqZ8OWMVuv51ow1FX7yVZTveocyHuF/A6R2Hpw/cLLOpnoZDtGwpcMQaeHFOoSS+tSER+KA70RyLxNALp6mzBql1fwA5pAqyraDGRcH0IXjST8REv3DE2A6/F9j6++uWJMkXSPfieeLAtq7M8oQX224x7T431SQTpDEfknYi2l4VhCGP8Sajr/jCzleTrqadO3xYBaPcnSFg1ZhhS3g6DsrbdYLsFBWwV20nZHY6qrKFGI3Nrpz8pifdTUoaPn+G7+LwAAr0MqGVTtvyMCLrUcebbnMc34OBYI6ltXuQmE+Yh9b9tRMxgWQSdGc+htc7it4fSwTa0qLeyWl4hgaAkNBh8qpontIaIHFoKZoFiUpgdQKR+dk0A3zR2kjtC13wAKILwmyO4iyz1tgBHP3JgK29qecP/XvksYyhwLDSr2TvpOKaH6LBWZrPTQ7Nhi5itBM1ulTPTBM2MSlUE86xQ2btrxAoR5gLwkVfYbedIrxri8XHIe0tgR3GJq3aGQ+9sUooYgRCEMDA962QlAwAhqSjCrSzs6TO+Z0d1L6Fj8s1yw5cf6ik9bQoxN+0v0Oaa3lIuXNgTsGHHvHoPDgv72SJ3wckpy/N14MsIb6hNIcy3iDZ0HApcsF6ljQTSPw3eVlcdh9Zc+vhX0nntVqQk2ElSN007/hv50du4kuD6Sb6/cqf4hCKFPilmDdLKnyXyjGF4eRlA8IUW7nwWtTdkW # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

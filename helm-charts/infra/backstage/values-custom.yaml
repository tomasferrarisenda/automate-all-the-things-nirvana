backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgDSqsFuEm1GxCTY2kdREmgHetewDKLnGeck0VJcjpxu77PbYoR6kdxdaTKAoK0XQKuO+Y9VXFqduX4gAb5XSbIw40fyBbRPPUCca6OdStE9KF2S4Cev4x2ivmzl/vBQo3YdaeARbeNN+6xYO3rj3W3zvcvyDp62xgq+harr0JKl+PV4WYSk4O55dS/M7ZePq6Frcm68QWD84ge+GRSqfzHrLLqm3RyaqwsEYLbb3O37Pz5PSbSJ4Yl5MEH9vw6Vf2lJhhgTsiHJrQmaAKWL+1XS3mAXfjnauCEHPMapLEnSclp2ju7laJXhElM8yzfSIea/laQCExRqOJ71WBKsoPEFW4xpk/Suk54Q5X9blRys7nNNmCwrjNHQBfDeAghnXzZqtcOTbmA2Tq4zDQ1Uqw+toCB/vBWgrTH0jiROPKhPGZ3/kE576xBhI5mcItS6XYLkn6/qP84VI8a2v32eseVt3rVdzpZoq9f9GQTuaLufkSI5qf/gt8VH2zVdtx+E6W8WLpGgWCCx1XhJcB9ZQMFggngSYedZo5foJQUt/UTVUyvR9egpalrSCNKYF2YxIEu6YPaxpS8WQIuQAoH2liHBmPDBhlsUVrzVcz0hm/LCNA03k2NpGvfQp1mkRamwjCUvxXy0u+HiuJfYiSudsJWDkip2G74ZGpcSj9BNZxXirwTxOCAsIrNxM/nEnG6LJLkJtGFrpGN1lcZZVvM0qS9s3okOhvEBWt9jO7yZlSFICpPIgaeoyoYx # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBhYmuUxr/V6l/BUFgMC9SnHBpDwPIdk4A1cRAPCVehsHZoFPoqy4MWhtJP9x9mIrbydw0B52EiE3mwpMMm+9KvHY9Lt2t1mSDK6lh18UXLZzQHLM0OvEEydLGQFv2k0tfNOdC0kYxpQcnRS3XuvqGDrdJ8bWGRcZV9kqaU0UR59ObTykV1MsXKbomeAct04igz5nT1qnmteiB4K2eAt83cBURTSTI2CmPIVG0N2gx8QneLCvBvPtzaXR9NpZR5vy7pO5haHdgKj79i5R7tr2giyPg0ziBw+TzNGSJr1N20Onwg03FLMnkBhF1dXtlIGb7f4Mwst4G3ocZUt+OEEZxw6uaaptqnJo9lPB9hmU1CWbyxr1SoJR7n0hqtLFjLUVbMst7iehii4rtMuCyAd0yS86RwEvl2ej6eBA2VuFIN860WlBq7xXSEH3/qeX4mCi0api+v07jHzO4+gsxT8JyP9aGuFk/RlCHqoFkPotsyqjsR9vklOMRJALLfgD8Mx3+dvtJuPlf6ewRfgJC8eKvyDQUBhpD0O/c+GPWggOtX06t5muNXcCjS+Q0SyIAnW8/aODMneDpORIoLyJiSPKP11l8fuu8OO5c/zJ+/relfwXCHwbqfquEOTEy5DlQo+Ez1BFxxpr0uaKV/O/8UFu9GRifccNIc5GS7JO02I1ooaDNDu/LNT7DyHM767jWBvDWeUlS2+1CHJMP8CnYmJ80RS00wwQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgCqX+1MUtXOl0DFAmJ+Lmp3y4CE1RBV0gEqWOsue6UxfWvTEtxbxdm7ho3NhCGjRf0D16CnD4f56gmbTC10hzZr2HwVZGUXlfgv7LDSLE/M6B1x3SSO4qACUy4284WKIF62Ig8nduaWZtBZK41lB/oI9D19DNHXYzVoBR5RaSq+MahgKUH0HyQJ4AyV91YucPS1tBMFDO350MmcGwNWYYKQpDdgmDcuRioUtIouKuN7cmcXvyrmqN4Kgq6+Jrfc1lJjhS6NMzPU99MtuUdjRhgaZENS41CR0cghNb9dBEKBe7MUMT58u9nFuZLeVb4t17cnCjPpS9oFMN/SrvmaMiQ6XPZhjuniZsd/2AIBAcgQPgOfufeU3zw+pqyZX6k+16RqAMt/pWc+JrqSQD/WJfwYWowz1m+2lIu6eNZpK+HyGPcmpFrr8nuEYJDU+8VCzF+xXXDUeGEuzgw5RPlL3fTFQAbv0JPr+aOWA1w7XQSDBR6SIPM7CICgRw1Erza2BNREyKUVWF5/3a0bZ+r/+xaBEdyE6peAZ9gERY9OOloSr20DzSbr390sa4WwAF8+rhuthNFmKdvZHGA1OUYonNqjMBJv3E2I2DzAVytWiBmMrWuu2MfFMUqu/SLNgdLiP7wmtPShShnn2ZhxXb7VYvpRYXygQ74mBguT+VjKV/lvfgvCW3sq6ZRV/AASdWqTVAEwuFtS0MlaNQlD7egnu5n2rBMo3f0qAbpAEG7+UWLv+0M/aBINYKat # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgDPJF8T4ozqQk+h3SC9OyJ/KS+XM3hWlf4I1OaFP4/G20mDd/AdqRalpFU+gJ36ZzjCw1dC60OyWqKmjJtTiQ3o0PQlIQ37c9Pl0SwBHotMvV8qR7Sdc5y6sD8GA8cpf0Co+yQ0Eni80KOO4lr0tfNdePm10xhzSQ9TeDRXa6pBe/lxogGfIwhOOyNK/W21M35Rhj5z85dhJpTl6qbEYCv+BIKvUZaG4vRyUlvf/kc+QWpCTkpEsOGOfjjpwPKup/QBXqqMsAB6YL3MFF4Y/JhE8YGmx0EDYjgCHQftuxiONIgtsawObWjOWTWSAMr5U46AppbP9+klHZEextw+F8gb1aX3QhfVSDmPOov2wG6ujDo83BT1kdShvx95h7sl/o6sQ1RsDDJTJT1w0tnryPqwp8cceiPFF4t/wY7dDxHuiFzE5xDyA1i9kFs5rhlUKooLS32v7ferzOLN3Vm/u0BGZVH8xWC7h/vPWHuuglb29l+dDWtEZkWFodDsabGkmqnlUUrakwRWkxtxjyKPivNaSqjgEC3VBHQRnI3yqmBSQoggGCrVxWS8ZhwBJKK8uzdsf/tnGvCm0Mf9nXohx6RfBdmjdoUIMpZyJpromu7qoxi2qWHi7ihEqAADMDSODeo0nXFI3TeHxJpSRRhHBToe2sQf/xa2rsSmYh48vnP+Nz5sYyptFIU9pee1c6r4uDe8fRI9Ojb9BY+uzxKX9C0wePuOp9ZGQ3l4WBFPoukZegaCBYU57YPfBGL9cMYCpUFIAI2dPqvYePPut2QF3e5EUkBKGygEn5w9TQcb6T0Cu68MGbjQckkkG/ad85rUYTB6QMHabi5OHwY5jidQ2VuWNlpuhJwR3/GXLUuRtgl+NwdW7VBCbnY1Yzwub0+lLsY3yzMu9uIrjhDSBmf4L5skt1kLrzG/+fxhQQ0UxoUNtDBEpfJ/VjuPgE2eBWqAvoCZKTMsZ3artpCs4ApD4kEN2LH1Po6kxAPesmIf+QvoF7xPO9/LTAqDXUUv3dW0Q4suNuQ/EjQs/+DiTM4= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBp8xOxR4PNNzpntaRPfuLODYVX9g7xHxP7+zGEaeSz1JO8IxeB/WpgRLrkaIMCloSKggfayz6OuDZG8HtnFnfgVhgEndhlo2FSGalU7/QbhdF4szZcFHt5Ed+/cEZCuzWLAZbtKE5yGkJtmm80+KOz9FzikYOTq9abSL/afTuat8Nn2Nk4pwLLsowZB6MaXfRoErDOiESmdhOvKwUwHV3mRhB2vbovizOYbvJUEeAQ/ZYWyBd57HTCTYiTmz29Vgv+iHNnA5RcCGrNz0XZ4xPT5rGcL+WTqONN+U6cDEhxX0bTJF05xOMhPxG4DPqcEHdH5Fg8n7OPvZY2Ul2YYfxFpU0lAKf1561ttnuIHjmMheKeQjm1nd6vKhcknSdnF2/0P/o/PibV49uS6Uvaa0rwG/e8tju8RpjHwFkUsbUEJtcDc1erQDjQzZV4piftfAf0Dyp7/nhveFKF4xAI8T3t2lS0K3QjeQUcP84+NGMMxpNN12Y8FPlm0i3xNAd4m7y3wRkGuN8tpVUPweEsnWzse8+Czg3jGJb2P2RQnwOnPE96L2csQgKPDm9BTF8sc1qiCUd1Uf8qQiOiHJ3o4y8nXqvIsDe0lzkvTzl2Dc7QPbgYsl1uLM2FvZZ8qirYI/Ribw+ssde/U/9bEP1e/XBA2/dRehQbzCJiy6N/a4HW1Ps/7o0qT0/yZCaHJqgqsszBq21ieZ/Qjge98k4bC+aM6+XsCxMHbPz9D+fWDiHa3fIRhHXB5UBFAh44Jx5+ # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "22" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBB+ttVzDcexg4vmZuoIVo7R1Heki89PpcwLHpzEqgHmgjimhrpkLbEZnUpBoXkZFuqOpeinQuuwKIWxMd0UtIFauZyGBhctRJO0lc09fGgbpdEvxtoFDzD8w+tPLuxHy0UaYjF1sV9cBsjoFOITEsVA3BmdSduEaFpmyY0DbbvZgjUB/Mkx7C96c2WaI+43wuXxhOPolx5pt2I+a+JK4ny/NGfZIPgXBjU6GvRYPfZ+0cAIVM9lx2qomXpWpW1zh3NlQ5bxgiWYd+4FgZyUXI6vwcy8cjkmYFHpiWgDs6iD+uYVSf26BYZ3YwWWHil2Le4lcr+tzC+NAnEhYBxNdTMZBUdehfvFkceh1tHiX6vM9PyahhGTMXQV5gYInTUzbTXbRs4eXe+ZYJOS2Hp8W1pKTOJ/7DoUi4ykEtcHjqtJ/MuU2d3OtYjpwwFCDPAERN4PuVudKemfXcFuYAS/xtOj7Bodgies0wXNr9ryHBo2NKEOCaaYxsHSBcoE1uScXWqbaXNiDft6Lj8AITCJccr6/2LnLr9oXC8ZpV8v3ceNqfh8NzMV+yPYoBIUWi49UGwmvvmWyqMDzcO3xiUiJy9Y9ek/eH+ip8rOcZZ4MiMyhUWniSFyDvIDLDO2k/G+bqx0Dr7KD7gStrQ+H2Y+0PqKHBia3EkEp2froumwr/5dALs1Ax1sNvyjRfaoPNkZ2MaKBZebkKeM/gkW5Cgkg40rM0vdhIs738MxrX3W+GUAri9m3/1SMxL # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAS1Lse2PVrqkx07kcfTbFNjBWCTq3STPKKWI8FPm/UKpPF5xkrSpo9JTjEqKvR0kKZBZDqb6+ocjRZNdykZ00pDtSInBV/ijPen0u5opHlKkm4RdjAWawsWg+cdVygHCF85NkMYxsK9vKVO4aQr5ODhCXAxj1Yvh5rNv8kZd+KwKsL4hppTRLz952zWMKAICOUlXkiL1uDjzNOp471WDlU8a6HWsJdHUtlFN1zMzC3ndNChfI4EcXbbjJhj8blfm631LGN2PdJA+6YeAtXLmRzp9Vq+X5h696biM1o5/g2VSKGrmwqhTJisdgMB20tjIlFNaykc4WIbGtCxVzYHdsBX7QoEFXtp6b/ueWl9kYwa+SMu/6rPtaxV01c3qzQ4z4FuZu1RPk40KQHbcCHk2QeP4hTVEBLmjVDzm/APY1QIJ9L7ApZVBIoGsUSshtGJK/jcsP0Wn4YqgsiqDibQYhLrUbQcWx6NyAIAqVSUxHt3O56VEJNP9kGJ9ExwBH1gIsipqmetr210xPghnipbDXsnnQdb/HyDq5gXnj68rZHYgsb0Qp1FVbnFcU0L4RJPWjSvPHtKcA7P8IuuiCdYbuIcTDKXYRlNhJoKHgOCymGehKUEyt+EQClL1Uh3l0Ohk82BhqqRSfD6pON02Wqn2xfEu9ZU/rRurMFErkAxMxarPCvt1CmESsJSkMeWeSHQ+GUHGOYAi7ZrLBxIVKq+tKvqHU5SQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAdO0Ztrc45t7bDdRmx+fl6hn1DHUTE59yOyADKwTYt/1IealHwocsYCu5x3WmFM2+H7IrSsSEugcXkr29hjTgwHlizUDUxu5IXKJ6oXbgDl+sSmOdKD7I1ZFJnu8/EKNEQo58sQ98DsNdqR0cWC9s8FXuvE53CnWHgBNbXkfYpf2GoYOR2E24G1jV8/fjcLyPVh7s0LgFeI1uMEtix1OlI2a/YQ3jk4epoe5S/gmYujL+Eu7nsjq4KpdnQpeoimI91CyC5RQqByy5zC8RxXmAbxHn/w/mriCt5aXNmnMiOIiFVvbUWfHf5EKU6Jq30YkO0fzfafl910w7dFR404AoOxkqJTW1PZgYKIbbv2QwiLzG/2gwnkoqtEXp35OV2q8opg/oxpl291ppvFsfLVMdDq+zAwWsP/LSwmoJ8GRVIZGsPJBvu0Nigy7fRQv9Mj7gcmBiKfUQ/O8DS61LmdvJfTgBPciBvvTfcKF4IJIAgM2RskgvUW3XRpeUDYjEnmnfrew12lvUar+6Y7sRUGrOhefU/SFklXcvvj/QSZJ2b7M0gzmQB4ntXHOzafae1wm3JVavz2xQXqr8pfaoMat9vo5RFxQE+3VljQu/3WBqDlwHJpinRdXdDAex11n43ky1Q2IePCpJ0jyCAGy6EHH4ws0G4VGaHn5Ne5UBD/2bx2JfKeIXtPEBBKZdxE7yk4IkobBpQk3J6PV/lEGwzI2K5pwylQ9L215Ily1coM7ir+9aRhjSuRa0+ # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBcid+ZUJO4gJ1kPiMApIc0DAcNhhSk+Lo8ZmtcEbJ7zY2EzPgoRrbQ8YGuIrXWAgzsd4mUrkE2gJpJMTyogqznf6XQ1kHNmt837IuXzetug8f3qB9eNDMYN4ebcRUOFIRZ/8pUm+GKEZkyLQtKeFD7JjFtPHO6MafUZnKWO2iz5/gdfvkeFwSFb9zLmOQEUWmXokCUX7MRcmZrcnpfY/Zwpf+R+/p8KPYbVVtOmDwXCG8AHpJClMIn216JJhktekmPn3NAJ4MsKib/PTofaWTNv7F3LmN1PXSMOyuSYVYlzsSQ09Rc2M7mFJ/FPu+KgHDOWAqwji4GmJkABbR0YuMRtnUmU84xcez6AEvj2GG69YB++ONIUPs3yL1kFoq3KOIMS3EPZn14LBVKghFfQWBb1i9nOKAQJA2MqGF19dOr+9Cw3GnhxcslqZzGfE+/m7mdBimHNxqP9gaJwb7J5ZbDLMxO+/WjieWHn9lxpZdheiYwFSOqQSTc+Aa+CfATn9TrF3MCpyVHZarCNgQQHPXW+3r7qB/wBbKt5ogQFAaSmb7Aa487TQeNuK27rn++rQM/HMWHA62f/55DWEKxjkcQ9M8bP1uL3b8NJqnlNdU6QRn9gWXo8skXfpt5e6aEelEoERnu8lYaKDyXQBtEsxRg/jYiaQTPsN3tpVVlNFPBPVEt7H7UGbWTHXP2sUV44Yb27xhIUrnB/bdQjMHs5oqYtMuB2IsF9JDrBwq9oexSS0R5Gldw7tl7tVugaIkEtV/jM8ToIzzh/C5sdRm8u9G9+k396OK/blZ3KO679pp8L34zVGu3qz6swfy4b+7OYJEauLdFk18ksfdanfMWIGro+0HeTfKcKX50HHX0mzh0fBytytaerVCNkW4R91SaXmoT1R07++Q7ftWFg5U7P65Nng7JQKXEX0JISxCHfUPUngsDMO8DTIoDY59q1vJpb1FeZlNP1v1P4zPLfx9UvsN8w/MRf636zFPGjrwrnBDHRSaSSqvJeC5Lvdz1veKCC/6O9nJhIIcxg3VfWcw= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBAxvKBKLXPo4y3iF8Dv0KJ0BFZWXd/GCMrpdKDXj7DwaWmFucD2Ipp+qAyXUsy3aJmkQhD38XFM247FN8xInDdYQta1bwBgLPzf6GkWLTmXeFMUjp+GGy2Lgt/R+sIfnTuqInqE3EfYmGgPRChAZ/xfa54zLHGYtALrn3LJ6ITQyPrknHtMF1csT+dRTxooqAl0NyNm2nBbtLq+J04q29XhITwmChsKGnpO4FNT6Msmln+XFSyaYq1KACsRZmbqQ4CrtpfdIpDOGXCdugk5px+yZBIYb4bzMZJEn0qDTY2hWzzG77Uc0T6bXM2I9ixJQ+1EorbPa8fOk7J50eo/oZDLdwXQlWUIPTrEF8IH3s+EZeZor0ei0p+rs2JvipU1NcS5iT73k/+myhDh3OihZ3aRA0V9cd6q9PMngB3LZOZnMEotq1fkMQmi7k1y0a3whGyKgeqrOWuEfzEbf8rFHaF6u1F75pB5LdOn1Nh4h8KS82fR6V30HBTFLx/HpAbEntytZDFSF2vB8Um5foKrBrYdqk2PZ5H898x/sVZr3x8zfhDqu2mV6rYkjb/tzz52bhvtpovE8hmlRY8Ubrzc1TdTpZmDIcJ7FdlTNuRsb7KHkV3DesRs9ef1rI1dyGVNbXxXCbibPfUW1qh71if9cqIoA7t9GjCTUgh3nTi1/mH6bO2ZzYSm+XbN414h+aq9BbuIO+EhDy3py9wZaWbZGxqRwlOHb0m2QpZNGyY+EJIxJvntXIaRO/7LqAxCpFu # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

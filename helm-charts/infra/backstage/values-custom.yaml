backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCijYzFDHF2JB8HLu0vp2oSzNSo1cJCEBYGmHkBGiKSESw9RYw1vZYVDMxdaZnatKUTzxcLSfEtApSqtcLuaB4mbTWFi3IjxPfuOVy9kB3JekpWK9iijKgjOioljJdyyjNCXSWOTsaMejNhr9+l/eDWpa8DNdSt0P35FCpcH8Ktpec7NihrhcenMIfP5sJNxN7if6jfCLRWN/KFNL4RzTnlnjkVqUrQNywWbRgREaqh+xM40ZsMsAmLPPeaWU8oM298Xj7O3rXVzoOISJbKobXDEKPsuLnVwg4veALyjfqynKeV8qlzylWwNg0JiCmHXj0NQXZERRKmiuqd1k0cDXFvzIB2hIW8uiZnN3xR6fs6G/R1Ay9iNqoK5gxZQv9loLF1Oq9Ypnu2hiXOvnwEnfUcErj5JdGZL6KHbvS4ZDfQZw5QqA88ApIXCJ856sgwQ3OnyJwhouYtZYY5WynawOfjUxrYwTPdb+mMEZoJKOH2lfqyn0spQyDC0YlHgNEDRpedst5JoQbnkuIkWLyGtTbexunxU4aSaMwiVYwAEH70yXIpD9fvml5yaUHEmbaJCP6fmG0wMx66Cc78n/4d9G1KHc1IZCZt4ZENy7ll9NUjyL/kKDk1FguRPuVCjFAJ7ymusfLCK9u/e2XkjLMq4kNxs+SZodRX2aAOWI10syOpi0bdxDUlcmCZ9OcvwjYY8TpCu09UmD5EgUoD6oqHK2eXH9OetTK7TQemR4yzx4iNTntRCkWnxnuD # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgDFHrBqq/nI8kTUzF2FbeFJmoVLzDR5EplzxyziiCKQm8dFJvpUn/iDO8/pNAY047c+EY8hi8wIUEBCLRW4PUIUVq1Hd3MN2vsPs3EN2Q/HE4gL76Td8ppWJz54zzj3nPm4d75AIgtflAg1rmsdWROhWEZGZbs8YiQLGPr7AiZaE0ixayiGYv+nnYqMx2yvzNx4uPEJx3L4CkCKND0f31xnKBQ4tXuyGDzRMVMFAx0FDEi85+u4VXRzsp25AgDrJOZqRXC+6wMjOzCBK5AF3dEXg2JVetNV3CJrhNGIvyzhkPb325y5gwaSNa2SRsYz5oO7OfYnMDjM8lOWMPfnn2xDZVrOdd1TiDzyJieUMt6qkUbrOOKunc/4ZiBg+ugcYdxTlRT71CfKpyYWXuzr7wykz5MqsOEGa+iOYjoFjUBp+DtkqVgxY5zIgN+ZSvSiz8DM4JaO6chXtRhw8YvYkvBuFEpDKL5xO5qkJ/J7+/5AbzjTFUG8aYv/6hKhOyOdyDGf99Bf+dlyshlXKrFmHKjo25sa+WusTqjT9v2Hdm0/odF7p7/Pki1nK2CiIwAkjO8UvXiM6W08oO/c5dbjYZ+JIuYfBiOasa9CfNgYEPU6HMITMPcSb3fF5MAeqvKjGIpZgeavo+sdRfmM/s7hFZDKcm8k+jxpx+YQ4uvIGDH05CFE/oruneaQeXUxLiRaiejQQi28B4CJgeuP62Ksy7rjYvfBFw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAyZuDgkNq/i/UVazYNuSSxeKLJcKgBCZKsHWJwSiGh8Dbzmwr6Ci3yLnGISmpz5V/ZOKXN9goOgNwwVNyC2tk22VusU3Oxm9pqPUZUbhPDJ13jT/Z2r6v6cg9UJU62Phz3r8hhuRcfwABf6nDNwOLvVpqR/EanY0+GTOn7tYU4MXDFjM8951CN9fDp+ERdAnpZFbxaNBXkEBxe9/78lYpt/DDMHz5iHgq5+x1eTPNnXwZF+4nTKYtO+FQzWXPB53vK3D9Fo3juc24DxiA67tXB/5dTqPDy6Y9WjJ8VMXgTtJeR/ccuTZMGQMUAqca057hizk67qRfwHYSj+uRGnd9LHzEGfcz8ccem3OXKPEzuUa/5iPrYyUausJsnkTmInRXRn9f43JbogRTnGSPZV/7hpyjG3h8VFMWyenhp9BUut6iAOHDjfgLKjhwrOQGll7ZaYdpwZzDXEY0zNi3eWxeUYw+ZGSGaxDOug4yWv0bUmA93PREqHOCskXLD6zalQD/ZbBEllY5PbHIMxJFlgEVMQqF2vKQXAb4UiwdW0WnPZTMGGHHvOYCtyur1U52sZP9sihWV14RxsumZdEzB551xECg35gUgRHyTR/hGoneay+3k9NKOhNfmVo0gIqkAzFV2MJWzqJrv5gnxUuoxocy03tulQyrUxehqXkPRTT10NXqdOzR2HSwluuFBhPh4dEu2xp1ecgdlC3MIzV0KsB9mchrTKQ+7+aGuJ6aVYDq5BO6/Ch7iYKva # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgDSaUKYfD1LSSr5sxu726WMKVHdZSziwUp8Tm1lA3FizE8/jBzRCZ2EdPRV0Aer+NDEs9ntLyJJ4rjMTUBa6ZW9jlBe5HP8almhh5iyKkPG7pl/cxwI5SRqNAZY1BeiqpGrR9cSOo4d2Tp+aa820ZVeEQBEF8Zr1Kh/RWxnzzPrIgpa3QwCLBqs/JNIsW8r+GtuLz8TtvzHAQDgwdYrGbx7DFS13d/YxZ63mwUdQD414ziIx6ahbGq9G9Ij6dBgm+0S1ndrGX4MKX9hNfoT1XWlj/VMQFuHHsfSxWvEZZO3kHNKuKTAf6MA2qfJ6Bx3uet+InF79E27+AiD5VlEEWy+ThG/dlWdgMTDRw5fDVXepUdE+cT2MueI+Wtbez75tTRbOR/q2sxy4KN0xZNdgYNqGVUs3zgQd4kanU/IHZF7P9Bu7nyWhWE7ZhqwpzXyGHN8cfAkAYvJcu16PEUtdoA19lMLJjTmGdBhcYVspO5huvOmrP9/QWCLSjBC1vpk9cSlbmThL7xj8a/8DXVxImvgO0IoPWJUzz4OsoKHVEf1zTDisftGsMyykIH1xqNJdtwbpiGvm8vEfG6A8k1WaX7OdQx8BryyBxb7khSnQw6EsmHFs4LvfZ90OpOa7izgPm+SQrP2By5R4DVlrPWDutCvOI5zinG7uRAwZQbvlrvBaBA8fUietrz9hqu8MI7xAI0J4WDcqppkJ/5BH/52Js/59hOsuDEUwq9+/ayNR3UHys4/VYRqrTRSx7OAb7L7zKjuOVgbL5uhs/0Kt0FuNoL44NevGEtYoIO7S2s6izNVyMTv74da5CtZ37sd/KQy+/iQ1eXuRaAjGePLJfuwE4DBU7LqWP6mSxocp/7JtCTuXOJ/p5o7nKQ7lJz4N0At9IAeERMHwBYfiQNM4KbCl4CFRAz6jzF/SHOE0a6hkUFmXLX4zM1lGr98/n9vesbkqm59d316CiVSLt49igNsQnbkH03LnDFxRRWgX+/tW0dfp+3+7pXSE34oeiuwwIAheNxduFCKRXJAxfEaoeer # This value was modified by the sealed-secrets pipeline
grafanaToken: AgC7qxZQ1bxrL1IhC9FbS7lLZgF2kVXTnDM39oPAr/VEhCcH1ZuRaZUFXFUYEA8biCyWOPMfUaC0IFdDEvkAQqFnb4InHPjVMktjpc4XErk6ONbEELfjusInMQqKyWIL/NbiqkAIbBNQrodLdJ80K+JEkTDbp0bwLQWzk4d8LwBBVMq5SwOJvKAKVrlkW/VpfvHVvBnoIN4bRHT5x9/L6IGoMcSsrLVVzvqbcWWndK8tI92Zr+1okXm/KAp21n7BfvrIgyXQIBupK2j/ldV524dhH+7J8d2zZ6TUr+RVuLbefFriIPBuOAofXVgpUtSQUo9Dp4S2OO4iulxn8Ny1CFmqTeOgjD0vlthIecO2tV3L4vJAMJq3th1+avPPpQ/y+Jof1CJe4u0bpVZV14hWo6zo9P4LJG4BANSI6uwqhv3sT1sMJ3RbPwv2m28Hjt+Qxnn4jDIGFdv6aVKF08njZyT07UW8ShXUsJoIKIIBdMg6AQBPjKU5U2AOi4wB7Zh7S7WQ1p4+bRosV/xha3boz0DVLpHSRx66ULynm8kcnapQWd+LlUoPSeTBgszZbMiYsgkL3k5tnJBAWlnrr8WjCuUNYGj35ijOF0JyX5WXr14iotHNgxxUzw0Ar6Ehc9lGeNKUHwCGJWnjZylkZJ14foOAFQ0zcj0AGarIowfkQQqJTAtHfhcAN7dQECu6/VBhuGCPjAiBGK8X67tnIzeT04iRcrvIuelaYu6tV2UMpyxZsWaCzoI3+E7KMUEMg9uy # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

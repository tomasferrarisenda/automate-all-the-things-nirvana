backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgC6YWGWugHqoGEAPMg2vyVXyOtBR3qnrLVIgyzvyJidp9MMc7m89XPDwL/M9VbMORyvgWEz1n9Vbgkbf+zEGEuKa6U0tdYHDxJ0PxXidh/m/ZRR6EKuFJdXgzLCkQTthdtbnJNw9NorU/hym75+i3T9t7GoLiVeC072nHqpCDe5qWZ4rfe5F5NVHNJfUpWdj/fkipPG4z7XaIqlTTd58Qr54EDqrdAVCfCMMMSPkyA04M4pmn7tOfQGjSySTUZxLyhpdVuj9siHTtcVk4ma57GdFLCXhl3J3JpRW6Ff6n2vu3AhaRHKjQMmWHuf3QNqc6iSLyrlyOY/sL0kpRGpJHHYewcYW3TDOJ4bgE9QvyJ9bzAmpr5MsZRDVQhL/1dHdU5kbIqAblMK1QEKZ45Har4G/L9OKwaS9K1K3/X25zs79ylDyGhb51T64oYJGCl/r+p4xxZWDmPb5hVkHK5O7NY2G/fZzl0WyamyMc+RDqBKPGNvnpxEpC99kHB5HkZ0ucAIPvdagZ+3Tmh4HWVtw/6oQpXAaYDC1C+j7a/kBcHH96KEc7pMzJLANdWZqHvDYO2ztdNZWBJFpiRo3iVi7E4fGL+qG6w9sv5yzVz/PBwbrfAwaFInJU1v+vDscpArB8bZ76PBXg8p8RAILp0Z92xpo347Fzu6T0hIRyt00Y3TjmxhDRgJd9Ac0gANeBSAj+Jp8mFSrf/Lp/1NCAK1Xa3nQRCssHY7OpEDnlglMPaPjdBPSiRMzBrl # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBdqYoLs/DjDszgogC9gXPsLSkxckWFor/1NLjJnPihDiTafFS0D8lRiZgQPR92TFrV3kg7slS3regH7mIrec1TuSatlZtHGURsBVQRGT/94mdc3dOWJWuxuJ/8gX6qpsqRiTzQ1iRrxi839NTRibP7B3vLijUpr2/A7U/3d/Pu8dKJWl7Fm8mrLl82bFUVWl9E67JHvGOR/Y3oBOkfuFZ9trQty5BnIt6x1OkPrpAXzva7yH7aYueeyWKehOSX3uQafJiR6anTgRxnCYzKTshFfeVP1Hv2T4jglTyM6BUGI17VJT6s7Szm5A4QVZh0l6eJc90EG0iDv5pIzQa69GhroEOOYvEXRC33vAzxmH06KZoqDZwfT2mlmDgqOKoqYbVH1qvWgV5x0oC+OI7squ4jWrFeNjbDQt9WRHSlctLE2714aUQ1sX5w++jM/YvGAmwFk54c5th7X9P1mMLFfcfAGb8ZcRoVSQJEGTNPp6nXXmNl8m2nV3ir6lYryuhQwuUFweffdtJLoZSLBElTXzY/cEjIGB8ZKbTrSM5GrWHfB/3kFk3n/ao3H0vXzCwiLMLWHg0WGSFzwOP89lVM+8sqEAWx+TQnsH880AmKdCkxt6z6dwHNJq099gvmAOle9HE4eixnoN5YLmAHFg0feVM3A31EBGIP62TcnqJsavl9PKml/BXE8H2wIcVUvPnNvmkLosh3xJMtINgO/QmBnjxryFEL1A== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgACbxnxWr5C7+BnIxBYW8MbQp4soGFvEzgKwPX6G4TEBjrWV+jZT1aN8xa3aHXZewjgKMl2SBUoYvVKaLJ/0FC2zaF230RzbeqMF+jTxNYfS/0VL/E57X4C897Ihqf7IJSRuYRgQV6l++bO7P6FnEJoLj3KICcswqNXlF+ffTCBZUKI4vkqOE/nw9nRyRnPHtdnn9tgkoW6uY9B+dKaJlzpFqOj1pqvLoj1J/1+4P/B1X3pg4R87Cl98R9o1eYynVVICNmpujEsVKJuWcTNSagG1JPF48kbZhOuK35q3f16DYH9SzwMEpQpHJqeztj0ngItA1Nd246FK9f7mzSboMFp5DNqq7F6TQ3lEBoYuw9tMEvw7KJqWJn0N7DuxPb1LE62K1jobBIpobZkTU6of8CLgv+WOOVY+23IBOsoihlI9ShXK+2ARt0FS5j/mwmCN36boYyqHxCw8dsrWiF9hfpuKVSCSnyBtnOZ9gAsW3Ydu9tKO9Gs7bCtR8O5nxUuALWDdfnhnIV563j9sZb8PGsEQznvKADSGrjimdVfrQ2qD4nVMe0XVMkaXzVsmSYETnulOk2BrnwrrqQtuw60tsZQ+WSQv1mdHEMkkLJ33Xh1dlBm+l+UAUjPrzPO6AEdfeWtwc3HBwRA85HY0axclwWTw32NRtKKgyaWSIGi3pCeYXhiEyr0uqBcV6AMWY3IZNNZchrt/ps6s5b5GD8NwA+sGKjOokfzz9zyl7Igp4IphHKFjDKyFvZB # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAs7UyVwRYNajW/4hfUlft6gXeDi9j5sX5bLkGx42RZF/5k1YbwZwvuS54YwikuVNZK0upHKCBm4ivX/iD4Cu5kKVs1oBzHyM2qx3SURvf6yxKNauHwDxxNRClmmEhoi+f7Wi9e+ujHtkBh0Ry0e/Y5gkYb9O3E4g72MsolEGbowR8eMyQOtEpTjhquOt7SJXHvPz3Fi7e6NvJRK6Nqerv2IAZyXOoAhE5G4M6cDMde3iGV65uR/Z0TZz3eeGPkB3CBUiShDTTSxNgihQjcen8Rm8jA33lq7DMVHxnfNmxX1W3pd8e1003jrZYpVvTEubCfFAmAT6gWIB7zk4wqv27ZZOCtydgxzjjriLNa6IVFTmTWSl0wgdsj/HnObQ5AaeWKSFcbHRkIVuDjc1w651Rv7F8YPDDmmm2VaKObbtjR+o2CCY3bX/rv4EJMsIdnTAwGRtfExMWFSLYGwAxNircooEzphd+UhBUCUPdTA27MuekUkHn2UcqL+La1x1c8V+7SNfPT/F2LXxpGlJf8snTEONropNP41WPHtMh/29TzZ4Kjqu+brT+Uu0u4Adj79vjlm6aKH9J94mTH1gxU0az2UHOrefS1ewRlMCf9R31/Ej0suCvEp5GABMu/o5u5GTFwtSiFi8+NwyKd2oaMnq8BLQYIjGrxpOdnhXjyzrRi5pXLt8UwidIPUE8SPnrqlOJu5la/wfr8RKeQgo1u/MWHlMIXWfMNhj1QiwVll8UtWpGamkemsJZ8z+Y+hbS177l5WljBvoo+jU+aPaj/NguuCIosPj7Idb2ylLDNF0gZ9o9q+x/42xoTcXXaXqH8xTwd9JipxTIpRShHz+9JHT45j6OxaykkF6NY4PD5MULsvXc2Fn7+VcojUv5JwYtAmTPu27g5yHoNJoCmt5ykyMaQb4wlMy0bVvXhjEr6JlHaTtEqSzNqhXFLFRQGiPaFOB/Teo/PnnY79bbBQVW0aa3bgiGAFt2d/abFhZ+FDbDx071O0HDiFAXXhpmRBxgq9JE03HrQfPVLEvpv0Jc= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgCfzxZnFP+ABMq9dUmePSufQ6uhObTbUtQxpCwSablwOKiyXFjYmS5wUU2cy6ygSH4ePYmHAhio4ABTpKZEHcOyxw00ZksHRMiLRXpPJlT9r3vqvf1X62kfhWMkwSbgzmThUyywgTSjjAco5XA+pp58rpC8GaOYVJnWjnvDJ0hsUCa04EL5csK5EGNRkgD4JA5jpK/SUIBsffPmoqXL/hAW8YhHaAB9VG6klwZ2gmkgs5kKlJQ2YQXJqyvGbe1hXm9Aw8n8oj29dhTo08vImEjivWoyiydcfRmfaIkLbEKbGwnFFfo5fpa5onE6k05fT/pwd7D1VtKsYjDR05M4kjnEOHbmPVRwfrxHqpGuDRbEYQFoVbVqKWkJjhRTwbTNNccbuHb533EjKYaKWU8Ejcwt0ixRG8PVU8zZAQ6XyEZGQjk+WHh7BCDIu+jfB5o3Fk7ojEBN29QxtuO2ih2yN3JBW+DZkJ3NaEUL6pe/YFoYxxqIa2Q4ghr9lGDrH8F0P64bDOPa3J00wyQH1rVFegrmzbBJzRUYjRRfc/C1IG7DIzkOducbGiEi/pyGLI2rYGXZKpFjM14Y3xTU5+DlhjXWVDoHIbiJIfDiigh8lJdwYSTooOV/9B4ieO+JGlWEDWnLAntswfWi57aoyyVCkV9I33MeBJRX+XNGAH1w0qRhz+xGe+6R5K+1pAUjmIs9jnp8rwqpIvNxWB/CC33qhiuuOcIsVzwAKHGRQmKcr4/8QASyriKgbmg9jxMnRe4b # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

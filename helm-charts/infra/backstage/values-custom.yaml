backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgBOTXxlDDYoE5DAN9ktUVXc9UAvFPexdWtNX771RzyqRlm2b/gW8jRNToLIywRYBTVTQjvpUP/1uj9FZtB8m6KcffedrM0R2MFzFVgIWxK9YvQokBHZEsw0cvCeDNGz1wdtDCHx2UUDGPXRhHtsPR0zW0B1ARYfDuMdlKGSjG7CW3sfz5LjeG9wNr3gSSqRf2J0tORHlO0dFMiRdQJLNDCwPo4xh227ASLmVTYpngu12BKx23QkA7PaNvMLVXZvwBO5pwNO4rWs4DUYalTy8noROML3w+u+taj/juucDdKudObPb17rVXuHQlgZwBd/1BxISTZb/rIfy+2F302mhR7zecyqb5Uqdb2SmUALFxxJwoL88h80h1CjPR+RPG2FNjecOPPlbnAL33ZO+der8jwi4ZystyTq309uEvhm7Q4+RMQdqvgjgo7MsGpnwaDmDANytVy/KboMsFvcbQmjQfh6avVX1UNJPUaW9y7K5kGGZYswqNk2e0NWio6uzIJB6hyaHdOg2AcZSL7+Gm+NpDNoGbfF8eMOOcEz715ERjmU9op0Bp6D0b0bis7Zc5NhZMW0JpyPGyRhfuxW5FJ4ueUFjWVv+lLr5HdEFGCGoiUyIcB2XyZ1Cp/4Xa4tAniYJpwhPIUGA19DakC+jXUaTUZo8iGJteRAs0Mc7YoRHPunCaguD+7nJDob9SezXzwZUoGOf6hWfHjTLTWT20XXtI2g26s1316Ici4al8iXeoi5YDA/vws2CW0R # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgBC2cbrKrn7411EgLuHx15czNlrQzi4ATsX9rSm/J7Cq0PpqLI4OYV8Jfmgq5+5P5xmDGD3LTi0R57begbCOkUXes2E3tTQPHFQQER+jK+sXBd/UCZb8pI6fJPHqAlqDFOhgV4ZAmePI8KakFFRY6WRwvZpvglk0I8Mows2OJpSs55JITheLgTht2l4GQB7rkWo9v22pglDWhWJlgD8LoU3+8M+uuSozP7mA0HmuRsZUEa7n40qI7a0OKwSiFGCrGfB8+2g3fQNe0hR2jUWRtjB0IzMrO+zy3piBav18UxQekoc58S05RYx8eCIScgopW2iYEKDyM4L8Q4QnrLCnPjdGA1j0Y11lDl1EiT78CgvZuzj3hj1RkNbiwtyQC0igPIFjRRTGmRE/53DGd0o5UZgdb0kVUqSNT86cUgdwuM/4HaYShwSOA0O8VHvjmx2H3MdKwv0DB801B7aDF0Ir/+RcnQ2oICmX8nfcYIUuLqhn2B+RBnr7TQWn752egoJFyhSe2pJr7+L0jyJxcAXZnMYwK2Rvy9PKN/+MdnbQvkpHBXExBulDGeLYaWoQbVyKofJ5yCRDHO+dhInhs7eGd4g5bN4OLpsalkE0SbTh5AiR0I/MBIiRYt5k6yUV24l1g9VmANAkDKKu6Q0ocy7hDGAhG5/rdzJp+5qEf15d2M/jdZ3/JjpKxuB1+522Iv6P3TJ4AzoeY9URzAx5+plKS9QOBFGPA== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAUZrPDwa2BuEKh/10ZPYsVq585KQB4/c5gy0z4mKwCzhFw0wkxva+mvUSeTAdwryUxsSWJROeqDnyJD9WzmFDzsfF4iZ+R67ihH4nepNO+qTtYl5+zhwlqIfEOMR3xfJv4Dh1WCs1Glvqmj6AFA7JecSWq1NvfK9PXnnydu7pw87ZJqSd9T5GVmEIqIZOuJhZA2rwRqP+HOp+bOYsmiitjdxFlQTo7JPn1Za5iqcXJx2Nx/OWYama+ETukMk4q3UYnyd33TX4wTkKOUNNJ8dQkOd3NDIsR/whdxkxnBiBcsZQXivD72GJDylUj5B/u9aaDDNKk3SlMNMcgcoB0InmLSpDIrysG6EaSujsgt3djp5Tuvshm9MuYcixt/wRskJLQNdyqxLfI0sGuO2vkQeEJUMuH2CtBpOZcDYasi0CRfmXJrnFGZY1jUO2BTA6nTTCYuSDaKEwEh3n7dJTuoRAhrzC3aLzZitBjnc4z8pC4Umm5BNOeJkdvefi+gkPCvqlHdaT/URAVNR3uk83wYCj9K9bs9YEtt5eOy/8oPsQt8xA2kWC6DiLujdhLytWoKnj86GyUyrL7lmD4NlKCKUF/N18wOE3FFza3etA59zZaHfnO3ioKlJbVvft+kvIZePjoimVyvQbpwJH5tdxEYictgAXMOZI1QoAfWM8dBv9YkQwXxHAIG0Rx4z35L/MlFkTKJDKGfWt6WkUlHRDxkmqZ88DDW3BhKNHeYjHDMTnyzrgI9dt/zhfO # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgAnpQKSXhf8hxU/GxwwhSQKY637z1CoPkjP035l46UjKekaAvWjvCbBQ078x3WZyjP5ePXNZ4HSrHjVNRJ9ohEkYacke7ylHz9fhYK+pS8xdlNw8hJB19hteJ4XY2kbsAVGAt3rXCBx/ilUmH684uDHwGNAIhwBjWgxVsQQ5z/Na0meHdzQIfRebLtHMcEbvwoAJ7QXzmZb7U9uP5eWBjMWtnykIfMoglRa8Jez4CP/bNaFW9cn2awvBl6QOUEPhXbhABL8O8LExaHVht/rvNNOw0jyNJqB68r74dF4TlIyvJziidYbQJTEGEs3NZjxfmfd/obC34F6tClW7+Bet52/UhKZn53QMOd1CsbBkX1n6Imp2EpKaWY6T04E1l4zIvrVBL4He+l/XCzmVutncrjNJPDY6TcW3FiJNEsANMTW/INGPYy7HbVJ3F3O7iHJsIWUG+fQEgdMQUhmSRYcOmmMakXoJHnkaayowrtxKi40/FtqZ7liVHgkc0VIR1jYeIocJXHQ8RAgIZkElHCh8N3pQZxRs2IHH/MO9/Tt4q+bNAHUWUwPzdbn8w7A9mY3rOGWawT730SOBMecnDoZWw8fPUtTXV2Fi1OP5OG9qVO91fkeOxNtzFtLAy3JcdrfuCvLRX2/IUrR7RZs3jfTp7qeScYsAqUp0K7VvtWLoUPIdgUr8O0chREIF0NsswK3kATGEVJ6qp4f8rujjTiQ2WWy54ELv2vlkbdLJYVZaAEJRZWoI9UnanAjW65piTS8DNbtk4EqJ9Xw8Z1jL2D11CN+oqnNPkc57SFwxsut8FL8HjkyarlJ/pSbHk9dD2KSJZWhuurNFWbo1JVW4U6SPiQZfgiCqn6jZidcpfShRPVuWV9bQ4QyexsCm/b9p89mw+A2GltG0MAbfXYWt+ctAa3oVH1IlYJvy0euV6b0im0UcAEfc1mb+MKHgr4/D+XhbjvPivFJRFmgZlZ3EUpVlZZxlqxwfuLbezIeaoGZZTBa6qpXVCeUvksp23Z0H6BHVhy2bR4ivdxXhwr2in9r # This value was modified by the sealed-secrets pipeline
grafanaToken: AgC1YtImqOdShHfRmhxDaTmZCd/DWWnl1OKQNSNhmYJfHKVsb87z1kdQTovO/yLyKiceUPHEmfklIiad9ZAtIj1QEpk0MBoNN3emsk6BkeollZhbr8CMRmY+snToXu5vLcUho4sjXaLQrvV7K1wPeE1sIvEmiK8siYs0s6kjsel1CVm072zhBuwHjHD0k99wQnuvcWq6zeokxWIHCJhodt7qF2JfvocOWDuxVhgHhBLkzqDgiwZHKdPkP+hcoK0JgvP5veda7jed7bCURtog0e+VVjNOJ/06iLZNzdvdQ2cdfABk1erNv2QvTphDbMPR3nqw9nXHAplHuBeHvcFwE4DLMD4+eSczmS7pqlCTpZy8Yi/vkwbZXqzpTPqTN7tJtwKjlYE/YTTjJjxmcykxRi9qT0r4WqvXi4nRe6ZO/kID64H1+mLHGIfaB/u+pT5CLM79TijBPiu5p/sBXLaKNuwY9qK6iZbOsW1u9s+k330eh7MQ8PmIm2+bmVui7ieyRrFRm07HWzu+vy2i6Z1uWzpif9cPJbWFquQUntnVfbTykaU0kMqVlDKG2V7dvPwuHjlTqHdvj9tDnswQv5V0r7l6a45pZnUdCleB0Vc1QHfp1CUytHOQaX2aVHLoGUdMZ3OZb/x9rerbH24trG35O7ZT2E8uW9MqcqE1yiTh6ApuWWcHCYmggu+5M8sgA0BCwWUIZqzfdhmpkEmqrucxnYQGLIjeowIHO/8YgxQc2XfNtS9Q/xT4bawumjcNaey6 # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

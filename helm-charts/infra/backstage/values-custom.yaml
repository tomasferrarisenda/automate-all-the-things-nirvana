backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCDTmfGQfYs67IOmK3Qxwqcwa3z5X3wqa8/zm1dRPPcZRFdaTwfTT7NoSCgIJQNQ0Upn7zcRrkm0pN1xASRJMUFDxJFNbj/ky3UZBH3MewU1C+PgEEATIEbW6c3hB+k8xkxS53aEEEwc6OIwHS1XGD9KCl3XXmVoCl7GKLFjLEstBzVofBV2g3dkw0XTvGjc6Fw/PYgkxONaANyvRhPGmqd4UwSoNjef4GyhG6j/ieVNDjAba2YpFTWeH6Sn3x8KlxHXygs+1RzMUQgxI6BfXwFTXsiUHFngsljsriXayqu+EUIkkjXaC4SIZ0nUvhJcCXIIpwrcBRJC5SAoB5PFRo0w3kALvDl3eFGTFSfT2aIWuXsTe6bH9Ilkdci4d2s5cNXoWgqyp2bRgc5XfrGxAYTkjp6Sb6ZwP91u60WSo6ugwRZyRF0i09rqJTjrqr2tGarxcYII/Mge6psvy0U1hC8kDy2LKzS3PqPhyZctoRgZYZfZDOqDWYEZoTGpV2lswZjxER4GGu5kTJjSLv+djsPXfHWQATSJFD2o1Zg/viT2ogQ+sBGIp0CPX/C/CKZZ732bvUZ8E23CDPALmWsM20yEAd1F57KOvcx/0jNJjajKF13UekGm3kVQqm00ChNxEMR1Y9khR2YpZC16xwDH/aOsZpEw2VkrbwAS+lKUYstUk4n3YapHxt9s+L1WKl2ZFFEDbhlkD6DUsOBZJD0fu+/COhnNGdl5quWuP0VpdR2Z9d/pgmczSmb # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAZhCf3aXo8AKb3YuJkgEXylNZSsCVkFdnx7tBzqrZf1pjkUMLr3D9Z/tsaGBb6O7lykFHkntKNRfB8Cw0aLyOjlVyiSYW4X7oDqbtp4KvbsNTMeJbsKv8PBFfgdWkJdcgB282wu/oU1IGfWaawCE/DIaC7bSlioBABVcW6O7njlEIwMdTE0zsTqhHRcnhKIaBeQ1V7zyEihrfECzYJP8S4ieBX2Uo59uHT6h3lSqNTPh8n8thqjUTMM/qHPh1CqgUmFEwK7TwlEyEGNilknU5ZenbglvCcL4sUpHuxERPNA33RNg+jEyhRlBYeGeMslBTZQ+LrHJhcI1BK9TwHlO5Ad3XoF4zR8X173jhiW8TPL9C+6POFF0gMwmCx2Z++7/WBi/ji96yRiOqx9YtQYa/hcEQg/0FCPqNkfIb4F2B1LmPnuksnXkgP3DDZoP4B6gZNC4ffrf2Fv3CBgGyvFgGOABZmoMRfFekVO4vNKPegd43Cksu5cPAJ7o70uy8v9K/+m/2EPfVsagJ/g0hHvt1t87wEJ+LTu81NuNlXwRdEZylcLAC+0fnxUZMpFMHZsuVl2PUM1SpiCBeGbrn+B6s1bpZphVWHKyUDXQ+OjhmvmgQ1tmofTOrcTnZXjNjvNm/VUKxa/+gURNrbeLr0anilzp9D0gvor3aLGDjOQTDgFbFiBJ+XkLFHzLQ66gWAVWRBaDpREQ+VDrdxhGAbbASG1Smg4w== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgApypggaQERsuavmbVrQKWVMIpkhiukdQZBwYFyARIwkX6hP70/Q6pQDl9rbCqagsuZJmfdWLVTFZnzBqO6GrNpxvewKqyfFD1dbDkdpC6DMm9lLJ7W9Dy7ni7WPQUf8HnVOM8pJWT6tQcdw8rDFyn+rOrR7DpmrSSVcfQRrb9zwdey7JKCdjZNYlIkTJ3pbcB9KVpX0NXoTM9LRtLiUqeX9JXzcPNsp04/I1myfYEf90qWzvx0t6Svp5OcXgpTuxE4IngZyqxBuevaYbvF9KPQUhMbwWsAkE07oD2ZgULoL4yY/6XWegKajF03iX+MlkvCGYUPbtwOQGsUt+8xJ7VujEGx03jC177lvFE11iJcC/+/eOZpAdz5Uuu7GUlAl2weFIERXoL98i+W1YHWhc/g65TPD7hAzwHMGR8Lcy5gqKAv+wPopQ6xtxFGWLuyqAjTOpSvG+aAlmWrMMjC1DdP/6h3nKVTnfnQH7BLdaplv8fAQlfTcs+4lDVWtlLOh7eBWBeg3bA19C7/bIL3oFJoUnn2hY38hxuQ8y4AamIDOngHX4v+MtIT+2ZGC5K2ZKSltWpGPjKR+x2YeBPbqlhPBwHsUZa8BasnXh5Yi1bWTYbQJADIrSKlWoGX+laZXscI7ddosqzQEkllZ16URgdORJ2atSYUSXz8XGn/voJZAXJ076HgEevP+CPfcuHdZW8T7qOVUj0uXcSmgP/oJMxomqfBI8+1f5Bs56WYbT5qqQvlGmq2r37q # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgCyHqlgrRyVB3rwSzH8PiK+0ZHXU+UStj/sBTkjXu/gEwn6sUBQcOyJn8u7m4MAWWDcoBwJvhfMgbcfz/biDIDQVx2d6oqLjwByXT2CSz2+F3MkGr9Wcp6J9X7BoRpBx2wt11SgLDf03+FkQM34tvI4Zh6jm1Xx7o2uYEES8jS9cMWYcoe3oQZL+35nQZr3Vp1jv4+PwdNdOGYOrMmTybkzVpRhE8tzBgkCuaUVLcfJFssyAK/iom4UsNKROWp8ftcHGjElaIJ095IVdPNuqkKlxV6/Tb/SNAs16ZtbsUObebS/5Jwri5RFVT/MI42trkT7CWgnnyemDCPwR1bydzemHXZEzD3EPjv83Sb3g7Wv0MhU+IQxvsZlne8WTawfh/91EvGVJb1LSFZ1bpXu2PLzOwS7REQnn2OGqWQc5ncvbBpR8JT/OfQJMxBBVHMwL/W52q6jvbfHBTAbBL0b+nJbOnGPspzDYd2/8kAaorSgNNQDmAOoaHofiPqa4CPYxmnbemBTaxvly3TeO6wCd3yGMjREWHpt6O5E25j2FhqUis/GQ4i27Ugw/3usqGJoD40nnSv4OfaD8OTll/svYeW8rld52Gb0STSUWzx9CVLMN1Kgd+ZpBsICS1cZL5jxZDe4MeU5uTBS/c5MIU1X232kuYy2VJ/iiED1njTZSsnW/Qg+Ji5catXQaHXxmhVzbe+7FmMQUsq4ITMq2knY4TOOg2t9LJ+Wyab4nB2WAAEVZgONYnxqZk/a2CPgU+tUsyAbU8G5pQUbHGgX83yAuhpTCmBiUic8EejTqDgsaMrPmfAWR4AYSqxGczq+2/EUPpdxNqsoU9OJSGcsYir/gU0xRfwMOZn8HUFTLzSX4W1Il+Z47lF4bhUwbuUgnOfYGj3u5ZFXbvuVLYoUsN1ZkDn+xri3+Z1Xkb+eGSHLq56MzzLoGDkxu4bbdByPD5dXP10V8hiQc67gA9KRQyKBNNUs3ERWSwxShDD1CaGtnxQolk2AKrnNHA/HKlNr3ICOgs4uaIj6nk5e2k1YJK0= # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBNpVAj3pTpkevSIzUduxjJlSghYUJjiMIRfXaFryMjdh74BZpKksRGdKSO1YXFLaQfm9g/kBW8D7+y4o45KOdCtLc5YwWmbo82LtoRDRZ67plYndlQSPdRz7Axpm2VH82te2xcsv7pcbnS4v8jQvI0zCFeNsG3G6NeCi5mVJE30qYLbLTbpEkVQEo5Skw5YyhFiaXeg6PoD9DuMguS/z/hpeJL9LnUigzjhdjSY6UEw4jrHxZ3C+SNrx+crXskHE2WvIy/gpH3HswTZC83eeHGVBEeWNdvIyjSgNKL5TEi9kvw8S52F9WiR/jKGQaToN2cZWgupB8TQkbGu/eBcP8TAFcuv7ofYvs8uqWGpmzUH7aZjHDKyYHxdSiS2QOv4j6eQUDMIre5bA1Gpr6xlmJs2ojS2jIO4ErOqa+JCpMfW49w0b+AZa+WiXz8HFrXu2iy00eSUDq8/n8L9apUDLRe5yKg+Ofrx5gPN+6NoZrexofIQEtewNjwOtACn3af7r8hycKJgSDJ1zNIA8wrG3Xs2AV2HMSF4ExH/+ANujBhJP77nldBsHRfIs4P+9t5aBEw7glIq5uxkOSLLqcAqyTtvWjxyhYVq5E5VBSl+fvtKCe9SmhI4JQ6TWZnPV3NKS8KN9zUNCfI4XQeRfbUdcQMTNqn/4vJvtTTloSdaSapvjLai0UgYxXC3il+5lA+g3fEy/cj85STKV0hbDQkJWPQur79PDiS4hfWzuq+XlNHW2WqmhFacU++MPRDzuWd # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCz6Ep2qxPhdTE87bO3ddmg7cy3AtKqZBmseLJ1plSPFquJlLVp8IaGTGVy2axhRAgUAG656pQZ7aKKYkGhddfpZsNjJANjURRe4dl6Mz6Fss1lvJOqkSTlvfzl9etrBGX6TIS69vxuB7/G+t0NojQC6m2C8JYDXzcDdg+3+cFow0JAvPIY1oroyTa8JIH9IvK7l9uT5Uc6xhrL+ZvD6eMSnxa7tjbP4woBI1g6fuy68h3kP3JwhWEa+gt/5fd7Xlxji02W+hVMaZz7+P5EYgFaKjx+6dRIoUWNgOEyBv07T39r5qa0TDp33k+4YI5hSn8eg4PHOWv4rYrULGfW/jkxdHtsXVKGXJmg+D2FCyYk5XV8faG1iWkptjMzmks7+ND2eCHKRkHTtUcgG/grWLX4+z/FV7ST7GusQ0OxEM5+B9j01trQehaZ/XOewqDnad58J+q007NDk0K7EzjWfYlG4ugw1IdOHKUD2rZ9SrHokMXvFyWA4IacLWkJm8E+2TGmUsXu8qMJLnMiwNkCATnkg0a3t/huibzSjyMxZ9o5NMM57oIcqRrf1DmquoBGTbaSjc6AJBWnVU2/duWalB+ZB7pyji69epObLRO1iCeQg0zbkAeiw+lxqvA5or3nudzEsvMh7UQCpBS66xhF/tUlbaLQK8UkKOcCQ321ggKy08TaSMFiOkRY2C4rdVoLPKdgYRJ5oOombdoho4qKDGlBk3Um/8KUW8al6sk4du9jyDxlU1ki3M7W # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgCKqp6/WjFH+ij8KEzLPS/UyurZk5AZlPcT0myn38qUa+IMBo7dIclfNcMEtWVvLt/pCNCQEAHqBKIkTSPEFwEjD1M2mbxaavVGKSxeu1lRJxsm6ETEgAoqb8hOM0FcLTwq6zf8BlOxj3LbsaoUgtDuG42A8gH/N3y3YD76O3rFmTJUh5Fry2RGYy5ekSXPmaDyFXE1Gk21bOO/wXKxU1xBxFtzf7b95aYz1I+bH0WKt+R/4XjSwsOHf2cqjDrGQe732NatuESIdkWlQURjyeMerY6wEaTACMce/H73LSIclVNuYa8fsaTnMc6kZMJAJ86/cWoknq7ZbMbsrLNTXhZjHgZuVcVyngq186N/kN9GzzOINz78bdARKS1MKzDIGgpzYhrl1lCj6tKYiDaticVGx+42ovMtZM7/tkfOWYP4QwcnsKtEkfOrxQZgKentptwJ1qmEKdH/N9iBs5WiPed15OtsHVYEOuchN1Me3mb/0RefkxNsTt3jaGc5CUV+giOrVphMTCJfmJ1fQrVt0fLpBOPINs6I2F1Kd6PQP7APrLwOR+bh6PdDJe6owGlz7aKA4qNjac7uY5nEOpfdq/MYcpfsfLJSoOOuy8mhmwiqW6hItRWIWk5wAVuIdm1qACEsXeXRoKMXVTQwI7vNl7X0hXaklfSTXvQRecM9yINqHsE2EbSBNmT5ll9QjBcJOUEmUhUPm5kbDnbuWk2sz/rkgHbJ7Q== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgBiQvNr0I6Izf0rvhwb7V2OmLhiRsj1S39yYJzscixH4gF0ck0P5kO29R3mtxiAT0YJZ436AWDb4E4IpETwGmxGNqubp69iT3xc7Zb+ENOpeP7LHkGP/K6FduoDTT7jro0hJAM8jlYsPeP9n6LMeSizeeT4bL9OD0uc6MBMuUrA2TEK6fUMMSF5CFzrkCzrpLAbS4EVRVZmz4wYKKSS5V6Wf+DHDwa31ur1G/7ZKXJeJi7qwgshDaAroD6ZnTOS6heQvUWnenDQSgPoFZCVAkrtMTYDX3+BhTaOv51FHloFWHr77T/D0R0RrN20XBgkEcfDu6/pcnu/BkaUzUyNyYctXCdY6LK+kStb6hvOz543cpm2gSljLED2Xj4FiPuvDSW+zSagOdEaxxvIKwbWsv899Cb0qpFw3E0lsy9hF5UM2qGPj9kklRCEeA9QMFpc7a8BneFHaFwCqyXrIU3tPUk0HNsQZnRlxi9T+HW7oStNPMfMBtqleTqnPyRCGn0zHhDhwCCasCgvZx7PV0Nb4DpoDAzQZPUCDqicuCr/JhXzo5geFSUWbjqrP7fGvvprCxWk08iqsP8RNOfWYBXhReI16PDFs6Kh/YYjF8e71S08qSL7f+29g+aPJu/s9NCzb3ymxGMe+C3IBZ/obsScLmOGD8rd5u6X9VxzaReZSeSDg+GN9GvqupcnKE6/jxy0x//2Ry9Pj3BQmG7vcnYGe3m8qR4vI2XSAwiwdCQ0Q7tLuy6uiup9Ts7n # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgCQydrukqfO+kbuHlZmmGS1SbiYkZ5r6p59poEPnni3Un+R/wMWUXabwAISD+7ZIaeYyhsWBj5pQgtOEOT14WbEkJt65XBe+QRaISugRk/zj3BEoLjkOgX6vzSV2pCS+zSeiGKkntXghZMhLaxeBhH18gvwl/9FuQtHoclT677I08T91LErQFwVLocWTg26iAFp1EHpba5vHNwKrooqsq6lw/1ZOAl2TF4ltF4cyQuKuBqfrNViN2q9ncrIRGM41LbOEitob3zWMALogLsN45f8jNTLi0sls1rl5jfvAYEXQrCKZjz3wClO33BwUZYqd9LO7PgWMh89AM0cKhgxfkGu+GMvvWiDcvCtz3oq+hy5VUeSNU0tzhnjBel0jRG8jTflkT4vNEHpcNmRGWUsbh+Nqjk7bjJ9zBXZigY7FxMGexB9U6ZJv+X27iS8iTQFa18rCfXafPOMQYiVPhZ3Pr6/Td27PuvisZQ3oYWV3KRU5ywIkTMhRCQaRPnzLx21ldqIb16dcdjn+xyjfk2jI+FwOkpwOrG+fucD12E0k6JcIsp2cieU4PYTK54NWYAPl5NFeYmU/XSoAhaVhXbsEj+k8iZqJz30pIvgAv5WSEvN/BkpJjXzkHZhNM7/np2cFr5s9MCufyG+H1EmGPpoTDSjaC5SMO79eoctIDzdB9LEELoEYCg16m/r2wTvm+qwpLTYVUMsaxh+50TQ4ZGVwoPvFiCHi931ENNkL+zjtC1k43dNy+1OiFMDTiWZd4Ue2G2/veaAq3xVFhDz3ZtwTWrRPWurVHVaPkppvyq1G9mqmEIWLps11j6JAX6TkdnmnA+blB/+WmFnHso8k3pN4eKggv9fXJMKGTUss57yUDuW0zrVubla6+wWVuFcL/LnWrNQ9FFhvFfs+6aXCYQwP712h+u0ayzaSNagSpz4C3zI6MRzF9tKuRoeSZfNoext8i0678QJLv7crOjdWnKNRAaLSgbxA1klMGzDhWdHeqBlq2wjo2l34n2hiPZAVDJhVqy6GL4aphF6OeF+liUw # This value was modified by the sealed-secrets pipeline
grafanaToken: AgBQTZ4SWkrD4AEQfs6dt7KP61oVPHVxH1/Y2xQF4yTIDtrWb8EzV0wz5cqq/a5JD2nWXr47tswqyeSqlFZedeROXncdNOhzTsMb7pKn3VOBBErWH39QdClkbPkxDvd19OG0bwSpk15ev1eHBoouLUULqVqFyIKvKJ4/2EEOOa5qM4eF8BSHx7eOct98xY6Ih15jT8rh5g+SFkdaiC7wFEBa3IzaR7n/zRZ8ntixvUJQK9wjceYjCeTCt0HScs1qIqs4Rj/NnkdhJBeMmzLDHY0cdL/oYjP59JBLWzecxC/OgDi/9dmCrn4c3GVvKwuy1J0v2X9nYHSEz2eYB3yXJInP7gkXDJ9Y9txVWfhZVa3TmliXDwSygk0/Z+3S1yhuhtgXevJ+YEcyxvBbphppVoAxc31SYivft6Dgk3xKuz/XQvRBvewkpfXylwklQgZoEUw6Qs/gBHev0t2a5eiDvf4FIvUMu1i4iJXAlfysg18+UbDaxrKgt263wJ+8osVQv7uJuONUtD3vVdiZ7FpaaedoP/IJZHHTT0Z4j0s7lO9hqiECwvnoFqrDw09TdFn7dlSOLzlC2W8rNzxd6o9EwDJKlim0JnJVlBq+Gr5LBnp1Oa9GFNh/LpXQy8UYvqbx6JWtBoj8O4McAPjQ6zdl65yfxnbETd0aTU9PTr2rijlTp7C/4uOx1g/g/TNVzolUFVxipdpwOdWS+4XRJ7GhrebeB8h9HEP9yNYDhZihKusUA6Eg6YxNzdL4Js37a4CS # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgACpzivjyNbyUaNX5FJjTGGwWrJY3a9BN3uAHPjF3B21roAVlgydkroVFiqEG9LXIUQEzSf97cYco8V0NSB4lrYi/nLzu8r2QgvsxO9F/UVzAw2x1C5oaa9keOIRww774b4zKOqVgV1PYMCcZh4SREtWQocpTOR3HM5y+FtfBqJx3HtpHSksoHqMOZ81xA7hz9uui99odbE29CN2O7/LntPknZBYI08CNq7IxjlFMaHO/zrie/htTi0YQ4K3As+Ab8Bj8/8kIY9Mpn1gByFQrN6I8Wb6r7Nr4c13ADlP3wgzBlJB3yeJpnoiP6hwTyVxP+w+sjTR0azzK2g3g0EskWoCsdQB3Lu1RKMOI/HLdAe0csY1cTZFQ1bqoX3kPXPFNH2eEvSRa2dLtb5cFSI22sKExeiAVGnffuJ9vuP8vJAPB+qen0gYQW1O+HkVerThz/ct2Zle5jpzGZ23koK8IMpL36Mi56g4wwAgjTsgOAUPWbV+UX6xHkEnDwPIBWvg8vWoPhQQj/t9h6UEmmQfSFBS5FVMriJoe2eevksiUSZkVRnVv3LkAWSyeenS4pDtqJLNijRJA7kqjPRs7TN+tPPZhsM/DpTS+JYXRqwaL4YpvxO2OofkSzOKec0QB0IiU+a69RUzF8XO/nmkwvbccjswkpDdFS1TThXSM5f1yEsibkYZqzPMN4G2oMMxVKLgx2UimMma/flU8mLV8Vjyj8D28PvR4JWRv39DIi2rx5VTmRp9mv4Sknl # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgAt0bxh0iPBOpU5XCRG0oyXaakIzNlVevTpozVYqEfXPCN3mvOX/T83Kk0ypf8u3l+SN62zvnZjMo7LLnoCipxFeAIAcML2/6bFSwuIq0oiUzL1yNxxLrD9JVYsqu4+SYgiwcQzVeexDZylqK9T6A9+muMuqNu823JRSf4RSJW4cY43uf8FeOCpnpGAnZr7uICkHwPWUrFcrrxVYvyQKGV2TyiulyNJlukxLSDNgFuET/tUT2txh8eJaBFbCAwT1NBBf4hJLp3ZZ+iM4bZamDCF6GXpHsKtOsTi5UcyXY+H8zVbW1X81cKV+Bej+AjkQ5P0s8W5WzHpo/YlFLjV6OJEvUvfYWvplAFj4+ND9rj6NX18B4egm7RIC7XLPteYFiDC8OFGKzb2YRcQp2u8lKkA8LKTobXAeHfOqqV6rLxdSvsuKnPxdGNs+9V8svEY2VaYsSWwaWlgsKUGjZNyVYcqbSVjJV7v9153FcDAx8jDHFmahBsSl9H2Pv88G4rOJRzpF6eH6MtjWJe99utRprIvvdXRY383kGKQqyVadxImbC9aU+SRf0iG4Cm8+di52Kylgpk84pZEIVLatdXAcsq43nfqRg3b3qNTXLdRhfP1OovfKVAYwJXvKbrGpskxBSJddRHdXDkJplaJT41vLTEPvIv6GZCK6nX+J9qBkVDCRM0jVLXwZwoWxIFnYM8K4O3V7wI0OtRWgvRxgtt330BQKAIIoQ== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgA893uUD9EFQU73kxBsBKmHQ5LtlPFzvlcflLSZXBtimo8XByc+/STst6UfcgIvre4WkBtDHYL1ABK50Kule/fRmzYij/9kUTkyzaeJtmcGJIVGnPd4kqlfYTGSjqftW0Q9orm3yK7fjdFBzXIE/IhjwvzwWP/sWA5d2hTaveC0dOVQnb9ktH1uAdGEyL0t9cllvspK5WALBJDVybmKyt5CWMM2WoIT9THe++xnan4RIWUC6JmNdt2mR5sO3KN3E+/5b8OM1vmwc2Sfutg9ncSf9BMEp644a1x0RFcudj8kNVmP+KGpDJyDDyAj5/CqLxik0RTcsfFj5XfienQPfVHagiR0a9VLZOazakggcesDfTf20ZjDCihBdHTv8+qsItHFas6KkqV/w36Hq9QEPZDGpGz1heWzIHXbbiktX79Vr/WWohm2EGPsQyVJlpdtBiQpGhp4gLJPdiovO3fb8iqkPx1/V5ZXRhDETcBdz4PoMowWd+hdAxlT54vZIx4L/oS4TYCfQzVorVH0VOBLmiWaSRjVU7W7cRtNSiBXLPw8n///AyqBPFEjmSxxbTh3cNdBLRIz12Q009c9iq1rc14Cxx9PiW/3A4ID87i2Sg4gu/wvMngc30imzU1v8cHbDanSGQWj7YFagT3q02Yg+CWqXf6WtzxjRvsUV9BEwzNJrQFPLxp3OS1p2wuFDAfjqvY/Fbl7DC+2xkqhBtjn6DJCiNrhiFYVnmKjOcG7E5lD/BEGS7R1n5Rv # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgBMxcSHOKgJPTeYAe4CeZZnSm79mqug6rGdSvB7WNt6fwq0wb9oTKSRfL4mLiTbsrfJYN4zfseq/fsxqOs784d3JF4SeoQwoZkdpy7A2GMe208Hb+VI1h1e0Xk6MSZRgSCKZpVdbtPBJo+MMmUmyNZrJcexOymkYUcJhsXLSfapZzx3QA6KKpXAOIUXEgiddn+6xoCAoGLH9NsdLY6gJQRSyP1Kxi9vhMhZI/UGmYu/FRfKDdnDirWrKDLAuMEM2lklnMuUUprFvg3jvwF9dokjgKAtjVImZpOg73H3r3bbVt3Mn982y60DjGJpD1fit/FvghVPU90BFff4i9JIATyQ7jfcMiMTynuLjdHRLjjJXy0SF7ZqEUooQcwkdPF92ZY8qVnD73j8SJgcXQIV/AF5uddeTYGo37qOOnBVrnCkYWlTD7e/Zn/1Ko3Oz+Z4O3zwa96WtOdlV+IQhgOl3DOCTmgXDmT8jGHrONgK8rNYtYiH5qxVhnMlRfdw+fSRrzWnBN/NPZt06VGUA/NV+osokXHq8TplDT5jNwsTQ1YNhf89kF/FRH9riOnx603frxPmjIJATjpQgE4xD5SuSDIV+jy5WAcbWxXJunyrqB1B5Hd0ng6cx/yRzRF3c9mUvLfEBuRKFN2QiaShcTCQ1w5kNakhMrG4RTARSvwsLreTiP/o79XdmoV6tO0j7nZTvMvbQ7F8XzTNA8IQJwCwZcTrEga353wFEgda7+Lbx1XG1XvL0l8CMxzJgdEfflcfNTex+voD6CtpZ5KZDOD/27VFdsb1HluZ3zHKExqiVFe7TMlwoHEUD31K0Tib2Mojpfebj49Hp4wcBX9kRuOkHRMX5q0j6jyLfyviQqAsknOGMbgafq1OEeR1dVa1wlyMULrXDCJZJFcXYSJ2BsNOhTKIVl4RqMUmljZxafQ/IjbJTgjD4DdKqBE4nN9kQDvZMdTLydlQvEKzHV9CJ93DyiqVi29ZQKlC+PDLqSADcWwoBTG7aWgbJ7hxM4kwQEh+CAsnQ/fXbflS03ZIGtpo # This value was modified by the sealed-secrets pipeline
grafanaToken: AgAw+ndCAAiWKjo9GEzVO1zOHS0LEmtGw9VX4qKF+S0yq1TXsG5vBH5bd/PqnBjgZg0ZAvST1DAXRgoTAN114GzcJ2cnkPVaIazpMd/dr6+Jj+2FKROMX5+Az5Fz081pX8NhBAL5ZaRqg7zFUkQ/Km0YHajVtWGyssDNg2LjD6dVNudobhGfyyVqbiE8dccniAGmjJ6riaWbJQvryfK0Lk5nWHhQlU3mZpxMobkrhky6DegSVe2oW+JwkaVsPWrtnzlCMiwUSEgwmT+tZxXFraHDv539JXE/VMEC9uDFYSm6P4/1hr1/+SIxXoQTRmDuyq3nOIsTzDi3riN2pEpiIqrkZTRka+FjAKxLitTS+BSTyq+Tea05q1BCJ0CQx7VvN6MpslWqiBUYf9vuKxgSKz3rfFiXDlkaHAXmntyPOdLx6GntXrSCeQ//Kn6UHTuhgHkURgmfnS7MqfnL0pnhnNZVf4Y1VP73cE7QC+1cgL360GlJ6Z7EogfP+wSDTu61PxNk7sMURuzDtw/VQuUvBzWSiXgx6hr/z0k+k7VBycOialUboMyKfVa7PRqj9Z/VEN9p1hJ/apmNey6mmsF13xvVjveRbnBp2bs/C5/CnVfQyK2ScmElxr8O1X6/+m/xUeYgxFMiOd4u/JRz63waYlsHczkoYm1vCQHzb9WsAp2T8fKejaSqeJx5l/J2dixETbkdZoIUjXxymsnk/f2Bq7O0HipoMdZkqemCJDbSBZHopmnJJmurq8hpqgLCbGNB # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true

backstage:
  command: ["node", "packages/backend", "--config", "app-config.production.yaml"]

  image:
    registry: "" # This is necessary to override the default value "ghcr.io"
    repository: tferrari92/backstage
    tag: "7" # This value was modified by the backstage build and push pipeline

  extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: GITHUB_TOKEN
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_ID
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: github-secret
          key: AUTH_GITHUB_CLIENT_SECRET  
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: argocd-auth-token
          key: ARGOCD_AUTH_TOKEN
    - name: GRAFANA_TOKEN
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: GRAFANA_TOKEN

  appConfig:
    catalog:
      rules:
        - allow:
            - Component
            - API
            - Resource
            - System
            - Domain
            - Location
            - User
            - Group
            - Template

      refreshIntervalSeconds: 5 # In seconds. Default is 100

      providers:
        github:

          # Use this if new services are created in their own repositories
          # catalogsProvider:
          #   organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
          #   catalogPath: '/catalog-info.yaml' # string
          #   filters:
          #     branch: 'main' # string
          #     repository: '.*' # Regex
          #   schedule: # same options as in TaskScheduleDefinition
          #     frequency: { minutes: 30 }
          #     timeout: { minutes: 3 }
          # Catalogs
          catalogsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Resources
          resourcesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/helm-charts/infra/crossplane-managed-resources/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            # catalogPath: '/application-code/**/*catalog-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # APIs
          apisProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/application-code/**/*api-info.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Templates
          templatesProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/templates/**/*template.yaml' # this will search all folders for files that end in template.yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Systems
          systemsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/systems/**/*.yaml' # this will search all folders for files that end in .yaml
            filters:
              branch: 'main' # string
              repository: 'automate-all-the-things-nirvana' # Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Groups
          groupsProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/groups/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }

          # Users
          usersProvider:
            organization: 'tomasferrarisenda' # This value was modified by the initial-setup script
            catalogPath: '/backstage/entities/users/**/*.yaml' # this will search all folders for files that end in .yaml
            filters: # optional filters
              branch: 'main' # optional string
              repository: 'automate-all-the-things-nirvana' # optional Regex
            schedule: # same options as in TaskScheduleDefinition
              frequency: { minutes: 1 }
              timeout: { minutes: 3 }


githubToken: AgCMQwNKJTyrtzhJayJszZXItXnV0AYDNQITlkPULIkMeqIPoW5soA1jIw9HyCyoFS7KuySXbDKXUdqnHkZO2V7rI6bookGS8xXEB6+U/89STX96HgAcfkwLocpQu8wIYtn/qE/f11P7/kDDU30AvDaHWMRGcrmw1I81K8rWfmS0+0MHz/eU0/GxdjPjJs2CfJ1DReNcA5jo2fxApFb+W3yJh8rASHgBe/CQ+7MiGzI6f9ENfLy/t5niDcsQ1U9rbvz1m/N+o8sXfLr9cyQiFbaVg/kNSlV8DB+Hpyc49KvuM81OQGK37R/6ObGvP+ifga+gHmlXNj+vM5wRPVvM+DQq73Il06v4ext5Wp++p0Jie2d8S1RZttVVX9EH7IbGzXig8yRAuX7Gt56KKRU0dkmQQt3GwAUi3nKevUpYRvZJDiWI/3Jr+7NpnI7dsmWIb1ASTxhpusq0ryaKmATJZFclyvWxEhmKhVGVLVwy2AgNl6IdAkQHyvG96t6lKJPm7vMhjGh0jDPyuyt71RKT11QCibkcO48ZYQ1SdU3sCXS+0pcfNMxL7qJownI51OUo/PUhNdUD0D6oC6SyBBBnyyF8+FYPDG2r7QHz0mwMweBJ7+EbACa3rv+nJwlF6x+8CEuwfSWkpyJ/KCp6s2rgHO1xI2aKfU1SUm4gfo2Sg0rxvbos6Pwg9EoU7kxFmVoeiYej+IrD/Jk5UhthPQQn57XhNXUh54rLL5ihOYuNVlAW6puoj8UsTT5y # This value was modified by the sealed-secrets pipeline
githubAuthClientId: AgApPqCGBKKgNACi0RO76IRrPcfGHvQORnPvCqtzutJwHL1IuxL+31FnLCMhx/CHvPtWYnnkySr+WavbEawmOTXPH8lJcDGf5k+hrLY3l1yLWS6ym2KQW1apPMtmwE/t8S9xfQQXDj4M1r75q7nZbpFlRyYcNAIUFDLSMe7db3jHRZJpJTSslrl7LqDw0nYNViwQ2gkWjcng4Kau6Xk+0UP2LUxQKkrYvojm+R97M6DBW2WjHfkxks0CWoMpecQlAPA0BesgJKXf5FB2rU1XM423ax0+oExjOgfQj6vySqsh3AkcMN7VOm0jI+EYb40pGryQCuXASohjFv1WrPhvtG3R2b9+NaVbEMJa9UAwwaPktkvIseAkAK2gjYhWEVdjf9i0WiflhDQuWj5I2JVgT0XCUkncEMov7aHPQ6RPJDo6pI3cgrvIPPU/k9k171zI6qpAk+LvXCVi8Sxc2I04W0fSzDItPfNvU9f+ta5C81k8CoVwhe5yTa5izMFT0QwSPO9D6jKhgBcCBSIUR9oN32+ulK1/GCIngNlI1u9XrMUQSVnnJ3E6t7ce2cChZNt/zy4AJ+1PxhtaJrOHbB5pzffxcDstoPkOl7XWauCieBLScx7VVC15G577HYhS5WN2DjFOklpPTy967hUZoa+3e2LfDGXMJVdE67LiX/2DmbifrrT6tSYX+HiHDX4OqtULLvwRCNPlBf5rlmXuppV0dsxqZAPLzw== # This value was modified by the sealed-secrets pipeline
githubAuthClientSecret: AgAWhDgJyzgwWAYJetHsSqlG95Ktp9UOLUZnU945guLSLTzEmMzBdgyL/SQ/dFyO9j3S8cMzGCk54Ri2yj8KmgG5sFpWncqJSQx/JMGlCOB0RKMqRMy4Vk3bCEoG71hnQ5VOKIJWduTatFBriFDm9uih4lSIwk5NF2hLm/Jb4D4MVNVTG3A0r+7DQkvZ58ZxkqLMIM5lxGp+yy9n8xv3tvR3ouj4qNRmSdQFJ1mpXA7FIcPxE4RMpkJOr7ZG7OP+nofxDZoSxcJ6LG1IJw+HsBtiJy839tegZup0c4Q6nc4VYnqyJ88J2ilC0TIMkocp7O44+onvM3mVLrPkcYJmhM+L+J/D8fKyUtS4IH2RnJY1FvB7F8BqxWPajqG345jYAXVZSAwOVw6WGtnZZDGZCg37ImEkZ3gyewpRNHTY8xkUsYdf7ktHma9kShWhKNGmRAj8v6uh8K90IuDs67P80R6rY8hfTR0BSxVhtZwvJTsI14phdUr0RPwnCKvfp1gqaWxA2j7Vvc/mewGBBRVdq9RDg3xt1UU+eqJZcXf6Ck0OXy0wrkPM7JQP5Y9lWz5ydleV8vy+4sg5KMursWJliNSgNQIl+ZU9U8ddXesXdU+TJg4cl0iKEiy5WXvOIhBSYI+q/A1rSTmdyPA/VBurmROPRTSFsPG0KM4W3auNJtB2Ih60P6bpdXQvqoub9DfpfKsuwPuAl9s01gRWmLqZKiUrL0rIZKR/gQ6+j6If2VeQ3Vh2CSYYtlcE # This value was modified by the sealed-secrets pipeline

argocdAuthToken: AgCSFkXg3/mBDHMzZImt4XZ8FI2ptSk6CVq3ffK0AqSd3cwPMJf+cOoS924chalOMgYfdxQz0ZehTOHdlSGCTIWS4WHIAmgj7jVjJdRyLLwRa7NSZhib4utgrAmAnmOtMcwpjeqr5CfrLKlIk3x3xhvuOlxSC+cgffH/xo4uYwzmAZ3Of+RPtWavfydxtAJ75czLs3H1dSXINHiTmhIRB3HK8PzxuRVAYYWi1Ati3mhutgwyplS/8WVEXPH4bOxgqmIDDcvbTJJ7wjmCo6lfZUGkcJGus4rYTWWW7ryw6AnGfBrDf6bELfH3LnWPqI6t/IWrqAbP+okBhKXUtIu9n/K7hGVwLyawLzhV3FJtOeQWLEEvm2Qdn+2nL03LjuXCpynLJ7RlqM5a3OcmFHhzPGjqkQ84JKXXutynsNw0azCkD2g6sGu0WOUR2mpWc8++CKauH7VF/bwkShFGWF9tj549BDNj34t5TEEiegTypwE9WqiQBWjaU7KodT75YEzOcmGdvjFi9hB8SeBO8osqpwNFmAK0yh3BL5W6T2o2Hoi0acncwmjeqnYmXwyiGbQsTqZESDUkkJ/xMm5ntvp2M9ctuPWXPRm/CV5WHdDNQlNxaQhD5X/cn5fuWfdoO1FB0ZKZjiDuZMVtwM5AU9oGCFGCfBtrNRFQ1Io3xVObn0pffsNfA+WILqvD4R/8X7fuB5iFK77x4F+V9MauIe265PqrIvnJF93bPFXO7M7MnsrKyThugKWHksGsCi3tREWbf6NM9NxkI1qxUs7s5MKf91VL/VeK/C1zIru/tyHAOEmixDOzN3a0bcGmW9ZzBunC1Zs5q5GQNoqP8q6LsCfhX9Ohxbd7JyYDSPap9xyoE5ZEdQ45sVdXaIy44H1tJ+8F1ETgwN9LsKjPudoZ9Vard+8h3Ofg8iHesOeDyCeqSn8yTsVSxrlxLhaAcG6lEP6ZsLVbgFlDwk3vUWunKXPPddl64Ab/6+HtsVSpApc+ip8PKTRtgFD7qlyfYMyR+KoEx6bcWS/jrX6MYY77cCfK # This value was modified by the sealed-secrets pipeline
grafanaToken: AgDLHEbSR1UgKy4hmthSw36o+pOKWpz3/qBiLmIhtD0s9Yv3zJTQtpm9k5fPGQsWbuurcpP3qDg08WWbw8Pu4qTSuA29oEexm01BFTrlwU+ZWnlUprDwx6Ede5uOxBiW6aVZX2xY/6lQhGU/OcfYJYN7W0IUxTaEJdMdYwbOcsgHr7HARna99diP0wqAJttSG07vaXWeXBQhIEJK9GCDTaI17NY0wnDcolTbut/x48jUjpqnb+viJCpwO8YWdxNinnWaLCc1yRd/QEsu6yH8XDOsn3QYKRAehhtOtICyTG9DpW+gakp3+Vz0j1+ZRje6rfz3qZcBvaNWJN3UuGkix5Z+dZImk/9EjjRM8yNISJgAV6vktb7nZ0SwS3c+zhmJoAiebtqaKziJNxQz1IhNSAgm9r0EJbRnwSofC477gli7ScNE2nVZ5ZlhXRyFbVS59KrrlVMMr++qN2eL8yfcLIPf2nXCorO5ChYt39Kyr3lkovYql00BdWLz5cjur1prEvuNycxm53WhgbpxFcwTAkES+ulvcYgROCEIKiiw9NuJrPhoDe7+R3/zSJ2JTPiZMu+FzzUaQKkAvNNmTiFLcnq6N1TMm4Va7mJXVQw2fQLJXZo+ODnv5YhLTKfHKMUTlnST6F5RlxJf1IbLcn0lLEQLi4ZX26LeDcnjbBPzWeS3FPFSyIUp1ttm4gW37JYS9LqJxTFd51tbxlm6z8YPRuKQqZNUBAZwcIjqXmSrTVzQvqll2XlbFq5LJPhdaiDt # This value was modified by the sealed-secrets pipeline

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'


postgresql:
  enabled: true
  auth:
    password: "backstage" # I hard-coded a password because for some reason, when updating the backstage with a new image tag, the new backstage pod can't connect to the database:
                          # Backstage pod log: Backend failed to start up Error: Failed to connect to the database to make sure that 'backstage_plugin_catalog' exists, error: password authentication failed for user "bn_backstage"    
                          # Postgres pod log: FATAL:  password authentication failed for user "bn_backstage"

serviceAccount:
  create: true
